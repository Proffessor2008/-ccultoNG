import hashlib
import json
import mimetypes
import os
import shutil
import sys
import tempfile
import threading
import time
import tkinter as tk
import zlib
from tkinter import ttk, filedialog, messagebox, scrolledtext
from typing import List
from typing import Tuple

import numba
import numpy as np
from PIL import Image
from PIL import ImageTk
from scipy import ndimage
from tkinterdnd2 import DND_FILES, TkinterDnD

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üé® –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
VERSION = "0.2.1"
AUTHOR = "MustaNG"
PASSWORD_HASH = "f6ee94ecb014f74f887b9dcc52daecf73ab3e3333320cadd98bcb59d895c52f5"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è LSB-–º–µ—Ç–æ–¥–∞
HEADER_SIZE_BITS = 32  # –†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–±–∏—Ç—ã)
PROGRESS_UPDATE_INTERVAL = 1000  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±–∏—Ç—ã)
MIN_DATA_LEN = 8  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–±–∏—Ç—ã)
MAX_DATA_LEN = 100 * 1024 * 1024 * 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (100 –ú–ë –≤ –±–∏—Ç–∞—Ö)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã —Å –ø–ª–∞–≤–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
THEMES = {
    "–¢—ë–º–Ω–∞—è": {
        "name": "–¢—ë–º–Ω–∞—è",
        "bg": "#0B1220",
        "fg": "#E6EDF6",
        "accent": "#4C8DFF",
        "accent_hover": "#6AA8FF",
        "accent_pressed": "#3B7CF2",
        "secondary": "#111827",
        "success": "#3FDA87",
        "error": "#FF6B6B",
        "warning": "#F0B23E",
        "card": "#0E1726",
        "border": "#253044",
        "text": "#E6EDF6",
        "text_secondary": "#94A3B8",
        "disabled": "#55637A",
        "scrollbar": "#243244",
        "highlight": "#1C273A",
        "shadow": "#000000",
        "radius": 12,
        "padding": 12,
        "border_width": 1
    },
    "–°–≤–µ—Ç–ª–∞—è": {
        "name": "–°–≤–µ—Ç–ª–∞—è",
        "bg": "#F7F9FC",
        "fg": "#0F172A",
        "accent": "#2563EB",
        "accent_hover": "#3B82F6",
        "accent_pressed": "#1D4ED8",
        "secondary": "#FFFFFF",
        "success": "#16A34A",
        "error": "#DC2626",
        "warning": "#D97706",
        "card": "#FFFFFF",
        "border": "#E2E8F0",
        "text": "#0F172A",
        "text_secondary": "#64748B",
        "disabled": "#A3AEC2",
        "scrollbar": "#CBD5E1",
        "highlight": "#E8F1FF",
        "shadow": "#DDE3EC",
        "radius": 12,
        "padding": 12,
        "border_width": 1
    },
    "–ö–æ—Å–º–æ—Å": {
        "name": "–ö–æ—Å–º–æ—Å",
        "bg": "#0B1020",
        "fg": "#CDE7FF",
        "accent": "#7C3AED",
        "accent_hover": "#9D5CFF",
        "accent_pressed": "#6D28D9",
        "secondary": "#11162A",
        "success": "#22D3EE",
        "error": "#FB7185",
        "warning": "#FBBF24",
        "card": "#0F1530",
        "border": "#232B47",
        "text": "#D7EEFF",
        "text_secondary": "#8393B2",
        "disabled": "#3B4470",
        "scrollbar": "#1C2446",
        "highlight": "#1A2142",
        "shadow": "#000000",
        "radius": 12,
        "padding": 12,
        "border_width": 1
    },
    "–û–∫–µ–∞–Ω": {
        "name": "–û–∫–µ–∞–Ω",
        "bg": "#021A2E",
        "fg": "#CDEBFF",
        "accent": "#0EA5E9",
        "accent_hover": "#38BDF8",
        "accent_pressed": "#0284C7",
        "secondary": "#03243F",
        "success": "#34D399",
        "error": "#F87171",
        "warning": "#F59E0B",
        "card": "#062B4A",
        "border": "#0B3B63",
        "text": "#CDEBFF",
        "text_secondary": "#8DB8D6",
        "disabled": "#2A5877",
        "scrollbar": "#0D3355",
        "highlight": "#0A2F54",
        "shadow": "#000000",
        "radius": 12,
        "padding": 12,
        "border_width": 1
    },
    "–õ–µ—Å": {
        "name": "–õ–µ—Å",
        "bg": "#0D1A11",
        "fg": "#D6F5DE",
        "accent": "#22C55E",
        "accent_hover": "#4ADE80",
        "accent_pressed": "#16A34A",
        "secondary": "#102418",
        "success": "#84CC16",
        "error": "#EF4444",
        "warning": "#F59E0B",
        "card": "#0F2616",
        "border": "#224A2F",
        "text": "#D8F7E0",
        "text_secondary": "#91C3A2",
        "disabled": "#416D54",
        "scrollbar": "#1B3A2A",
        "highlight": "#12301E",
        "shadow": "#000000",
        "radius": 12,
        "padding": 12,
        "border_width": 1
    },
    "–ù–æ—á–Ω–∞—è –ù–µ–æ–Ω–∫–∞": {
        "name": "–ù–æ—á–Ω–∞—è –ù–µ–æ–Ω–∫–∞",
        "bg": "#0D0B21",
        "fg": "#F7F7FF",
        "accent": "#FF2EA8",
        "accent_hover": "#FF64C3",
        "accent_pressed": "#DB158E",
        "secondary": "#1B1841",
        "success": "#00E6A8",
        "error": "#FF5A7A",
        "warning": "#FFD166",
        "card": "#221E56",
        "border": "#3B3784",
        "text": "#F7F7FF",
        "text_secondary": "#C8C8F0",
        "disabled": "#6A67B2",
        "scrollbar": "#2B2770",
        "highlight": "#2A2671",
        "shadow": "#000000",
        "radius": 14,
        "padding": 14,
        "border_width": 1
    },
    "–°–æ–ª–Ω–µ—á–Ω—ã–π –ó–∞–∫–∞—Ç": {
        "name": "–°–æ–ª–Ω–µ—á–Ω—ã–π –ó–∞–∫–∞—Ç",
        "bg": "#FFF9F4",
        "fg": "#1F2937",
        "accent": "#FB6A63",
        "accent_hover": "#FF8B85",
        "accent_pressed": "#E1544E",
        "secondary": "#FFFFFF",
        "success": "#10B981",
        "error": "#EF4444",
        "warning": "#F59E0B",
        "card": "#FFFFFF",
        "border": "#EAD7CC",
        "text": "#1F2937",
        "text_secondary": "#6B7280",
        "disabled": "#B8BDC7",
        "scrollbar": "#E5D7CD",
        "highlight": "#FFEDE6",
        "shadow": "#EAD7CC",
        "radius": 12,
        "padding": 12,
        "border_width": 1
    }
}

SUPPORTED_FORMATS = [("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.bmp *.tiff *.tga *.jpg *.jpeg")]
STEGANO_METHODS = {
    "lsb": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π LSB",
    "noise": "Adaptive-Noise",
    "aelsb": "Adaptive-Edge-LSB",
    "hill": "HILL-CA LSB Matching"}
SETTINGS_FILE = "stego_settings.json"
HISTORY_FILE = "stego_history.json"
MAX_HISTORY = 10
MAX_FILE_SIZE_MB = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è (–ú–ë)
CONFIG = {
    "MAX_FILE_SIZE_MB": MAX_FILE_SIZE_MB,
    "SETTINGS_FILE": SETTINGS_FILE,
    "HISTORY_FILE": HISTORY_FILE
}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üõ†Ô∏è –£–¢–ò–õ–ò–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Utils:
    @staticmethod
    def safe_int(s: str, fallback: int = 0) -> int:
        try:
            return int(s)
        except (ValueError, TypeError):
            return fallback

    @staticmethod
    def truncate_path(path: str, max_len: int = 40) -> str:
        if len(path) <= max_len:
            return path
        return "..." + path[-(max_len - 3):]

    @staticmethod
    def format_size(size_bytes: int) -> str:
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.2f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.2f} TB"

    @staticmethod
    def is_image_file(path: str) -> bool:
        try:
            with Image.open(path) as img:
                img.verify()
            return True
        except Exception:
            return False

    @staticmethod
    def get_file_checksum(file_path: str) -> str:
        hash_sha256 = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
        return hash_sha256.hexdigest()

    @staticmethod
    def get_free_space_mb(path: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –≤ –ú–ë"""
        try:
            if os.name == 'nt':  # Windows
                import ctypes
                free_bytes = ctypes.c_ulonglong(0)
                ctypes.windll.kernel32.GetDiskFreeSpaceExW(
                    ctypes.c_wchar_p(path),
                    ctypes.pointer(free_bytes),
                    None,
                    None
                )
                return free_bytes.value / (1024 * 1024)
            else:  # Unix
                statvfs = os.statvfs(path)
                return (statvfs.f_frsize * statvfs.f_bavail) / (1024 * 1024)
        except Exception:
            return float('inf')  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    @staticmethod
    def check_file_signature(file_path: str, expected_signatures: List[bytes]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as f:
                header = f.read(8)
                return any(header.startswith(sig) for sig in expected_signatures)
        except Exception:
            return False

    @staticmethod
    def calculate_brightness(color: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ WCAG"""
        color = color.lstrip('#')
        r, g, b = tuple(int(color[i:i + 2], 16) for i in (0, 2, 4))

        # sRGB to linear RGB
        def srgb_to_linear(c):
            c = c / 255.0
            if c <= 0.03928:
                return c / 12.92
            else:
                return ((c + 0.055) / 1.055) ** 2.4

        r_lin = srgb_to_linear(r)
        g_lin = srgb_to_linear(g)
        b_lin = srgb_to_linear(b)
        # Relative luminance
        L = 0.2126 * r_lin + 0.7152 * g_lin + 0.0722 * b_lin
        return L

    @staticmethod
    def get_contrast_ratio(color1: str, color2: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏"""
        L1 = Utils.calculate_brightness(color1)
        L2 = Utils.calculate_brightness(color2)
        if L1 > L2:
            return (L1 + 0.05) / (L2 + 0.05)
        else:
            return (L2 + 0.05) / (L1 + 0.05)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üé® –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–ú–ê–ú–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ThemeManager:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.style = ttk.Style()
        self.current_theme = "–¢—ë–º–Ω–∞—è"
        self.colors = THEMES[self.current_theme]

    def set_theme(self, theme_name: str) -> None:
        if theme_name not in THEMES:
            theme_name = "–¢—ë–º–Ω–∞—è"
        self.current_theme = theme_name
        self.colors = THEMES[theme_name]
        self._configure_styles()

    def _configure_styles(self) -> None:
        c = self.colors
        radius = c.get("radius", 10)
        padding = c.get("padding", 10)
        border_width = c.get("border_width", 1)

        self.root.configure(bg=c["bg"])
        self.style.theme_use("clam")

        # –ë–∞–∑–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.style.configure(".", background=c["bg"], foreground=c["text"], font=("Segoe UI", 10))

        # Notebook (–≤–∫–ª–∞–¥–∫–∏)
        self.style.configure("TNotebook", background=c["bg"], borderwidth=0)
        self.style.configure(
            "TNotebook.Tab",
            background=c["secondary"],
            foreground=c["text_secondary"],
            padding=(padding, padding - 2),
            font=("Segoe UI", 10, "bold"),
            relief="flat"
        )
        self.style.map(
            "TNotebook.Tab",
            background=[("selected", c["card"]), ("active", c["highlight"])],
            foreground=[("selected", c["text"]), ("active", c["text"])]
        )

        # –ö–Ω–æ–ø–∫–∏ (–æ–±—ã—á–Ω—ã–µ)
        self.style.configure(
            "TButton",
            background=c["secondary"],
            foreground=c["text"],
            font=("Segoe UI", 10),
            relief="flat",
            padding=(padding, padding - 2),
            borderwidth=border_width,
            bordercolor=c["border"],
            focusthickness=2,
            focuscolor=c["accent"]
        )
        self.style.map(
            "TButton",
            background=[("active", c["highlight"]), ("pressed", c["accent_pressed"])],
            foreground=[("disabled", c["disabled"]), ("pressed", "#ffffff")],
            bordercolor=[("focus", c["accent"])]
        )

        # –ö–Ω–æ–ø–∫–∏ (–∞–∫—Ü–µ–Ω—Ç–Ω—ã–µ)
        self.style.configure(
            "Accent.TButton",
            background=c["accent"],
            foreground="#ffffff",
            font=("Segoe UI", 10, "bold"),
            padding=(padding + 2, padding - 1),
            borderwidth=0,
            relief="flat",
            focusthickness=3,
            focuscolor=c["accent_hover"]
        )
        self.style.map(
            "Accent.TButton",
            background=[("active", c["accent_hover"]), ("pressed", c["accent_pressed"])],
            foreground=[("disabled", c["disabled"])]
        )

        # –ö–Ω–æ–ø–∫–∏-–∏–∫–æ–Ω–∫–∏ (–≤ —à–∞–ø–∫–µ –∏ —Ä—è–¥–æ–º), —á—É—Ç—å –±–æ–ª–µ–µ ¬´–ø–ª–æ—Å–∫–∏–µ¬ª
        self.style.configure(
            "IconButton.TButton",
            background=c["secondary"],
            foreground=c["text"],
            font=("Segoe UI", 10),
            relief="flat",
            padding=(padding - 3, padding - 5),
            borderwidth=border_width,
            bordercolor=c["border"]
        )
        self.style.map(
            "IconButton.TButton",
            background=[("active", c["highlight"]), ("pressed", c["accent"])],
            foreground=[("pressed", "#ffffff")]
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∏–∑–≤–ª–µ—á—å/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
        self.style.configure(
            "Action.TButton",
            background=c["secondary"],
            foreground=c["text"],
            font=("Segoe UI", 10),
            relief="flat",
            padding=(padding, padding - 2),
            borderwidth=border_width,
            bordercolor=c["border"],
            focusthickness=2,
            focuscolor=c["accent"]
        )
        self.style.map(
            "Action.TButton",
            background=[("active", c["highlight"]), ("pressed", c["accent_pressed"])],
            foreground=[("pressed", "#ffffff")]
        )

        # –ö–∞—Ä—Ç–æ—á–∫–∏
        self.style.configure("Card.TFrame", background=c["card"])
        self.style.configure(
            "Card.TLabelframe",
            background=c["card"],
            borderwidth=border_width,
            relief="solid",
            bordercolor=c["border"],
            lightcolor=c["card"],
            darkcolor=c["card"]
        )
        self.style.configure(
            "Card.TLabelframe.Label",
            background=c["card"],
            foreground=c["text"],
            font=("Segoe UI", 10, "bold"),
            padding=(4, 0)
        )

        # –ú–µ—Ç–∫–∏
        self.style.configure("TLabel", background=c["bg"], foreground=c["text"], font=("Segoe UI", 10))
        self.style.configure("Secondary.TLabel", background=c["bg"], foreground=c["text_secondary"],
                             font=("Segoe UI", 9))

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤
        self.style.configure("GroupHeader.TLabel",
                             background=c["bg"], foreground=c["accent"], font=("Segoe UI", 12, "bold"))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.style.configure(
            "TEntry",
            fieldbackground=c["card"],
            foreground=c["text"],
            insertcolor=c["text"],
            bordercolor=c["border"],
            lightcolor=c["card"],
            darkcolor=c["card"],
            relief="flat",
            borderwidth=border_width,
            padding=(padding - 4, padding - 6)
        )
        self.style.map(
            "TEntry",
            bordercolor=[("focus", c["accent"])],
            lightcolor=[("focus", c["card"])],
            darkcolor=[("focus", c["card"])]
        )

        # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        self.style.configure(
            "TCombobox",
            fieldbackground=c["card"],
            foreground=c["text"],
            selectbackground=c["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=border_width,
            padding=(padding - 6, padding - 6),
            arrowsize=13,
            bordercolor=c["border"]
        )
        self.style.map(
            "TCombobox",
            fieldbackground=[("readonly", c["card"])],
            bordercolor=[("focus", c["accent"])]
        )

        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è (ScrolledText)
        self.style.configure("TText",
                             background=c["card"],
                             foreground=c["text"],
                             insertbackground=c["text"],
                             selectbackground=c["accent"],
                             selectforeground="#ffffff",
                             relief="flat",
                             borderwidth=border_width)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.style.configure(
            "TProgressbar",
            background=c["accent"],
            troughcolor=c["secondary"],
            bordercolor=c["border"],
            lightcolor=c["accent"],
            darkcolor=c["accent"],
            thickness=14
        )

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        self.style.configure(
            "TScrollbar",
            background=c["scrollbar"],
            troughcolor=c["secondary"],
            bordercolor=c["border"],
            arrowcolor=c["text_secondary"]
        )
        self.style.map(
            "TScrollbar",
            background=[("active", c["highlight"])]
        )

        # –ò—Å—Ç–æ—Ä–∏—è
        self.style.configure(
            "History.TLabel",
            background=c["card"],
            foreground=c["text_secondary"],
            font=("Segoe UI", 9),
            padding=(padding, padding // 2)
        )
        self.style.map(
            "History.TLabel",
            background=[("active", c["highlight"])],
            foreground=[("active", c["accent"])]
        )

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self.style.configure(
            "Preview.TFrame",
            background=c["card"],
            relief="solid",
            borderwidth=border_width,
            bordercolor=c["border"]
        )

        # –¢–µ–∫—Å—Ç—ã —Å—Ç–∞—Ç—É—Å–∞/–æ—à–∏–±–æ–∫/—É—Å–ø–µ—Ö–∞/–≤–∞—Ä–Ω–∏–Ω–≥–æ–≤
        self.style.configure("Error.TLabel", background=c["bg"], foreground=c["error"], font=("Segoe UI", 10))
        self.style.configure("Success.TLabel", background=c["bg"], foreground=c["success"], font=("Segoe UI", 10))
        self.style.configure("Warning.TLabel", background=c["bg"], foreground=c["warning"], font=("Segoe UI", 10))

        # –î—Ä–æ–ø-–∑–æ–Ω–∞ ‚Äî —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º –º–µ—Ç–∫–∏
        self.style.configure(
            "DropLabel.TLabel",
            background=c["card"],
            foreground=c["text_secondary"],
            font=("Segoe UI", 11, "bold"),
            padding=(padding * 2, padding * 2),
            borderwidth=0
        )
        self.style.configure(
            "DropLabelActive.TLabel",
            background=c["highlight"],
            foreground=c["text"],
            font=("Segoe UI", 11, "bold"),
            padding=(padding * 2, padding * 2),
            borderwidth=0
        )

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.style.configure("StatusBar.TFrame", background=c["secondary"])

        # –¢–æ—Å—Ç—ã
        self.style.configure("Toast.TLabel",
                             background="#333333", foreground="#ffffff", font=("Segoe UI", 10), relief="solid",
                             borderwidth=1)

    @staticmethod
    def _adjust_color(hex_color: str, amount: int) -> str:
        """–û—Å–≤–µ—Ç–ª–∏—Ç—å –∏–ª–∏ –∑–∞—Ç–µ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç"""
        hex_color = hex_color.lstrip('#')
        rgb = tuple(int(hex_color[i:i + 2], 16) for i in (0, 2, 4))
        adjusted = []
        for c in rgb:
            c = max(0, min(255, c + amount))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 255
            adjusted.append(c)
        return f"#{adjusted[0]:02x}{adjusted[1]:02x}{adjusted[2]:02x}"


MAGIC_BYTES = b'ONG'  # OccultoNG
HEADER_MAGIC_LEN = len(MAGIC_BYTES)
HEADER_CHECKSUM_LEN = 4  # CRC32
HEADER_DATALEN_LEN = 4  # –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
HEADER_FULL_LEN = HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN + HEADER_DATALEN_LEN


# –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RNG
def _generate_rng(password: str, method: str) -> np.random.Generator:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π rng –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞."""
    seed_str = f"{password}{method}".encode()
    key = hashlib.sha256(seed_str).digest()
    return np.random.default_rng(np.frombuffer(key, dtype=np.uint64))


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß† –ö–õ–ê–°–° –ü–†–û–î–í–ò–ù–£–¢–´–• –°–¢–ï–ì–û-–ú–ï–¢–û–î–û–í
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class AdvancedStego:

    # ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ ----------
    @staticmethod
    def _pack_data_with_header(data: bytes) -> bytes:
        checksum = zlib.crc32(data).to_bytes(HEADER_CHECKSUM_LEN, 'big')
        data_len = len(data).to_bytes(HEADER_DATALEN_LEN, 'big')
        return MAGIC_BYTES + checksum + data_len + data

    @staticmethod
    def _unpack_data_with_header(full_bytes: bytes) -> bytes:
        if len(full_bytes) < HEADER_FULL_LEN:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.")
        magic = full_bytes[:HEADER_MAGIC_LEN]
        if magic != MAGIC_BYTES:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã. –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        header_end = HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN + HEADER_DATALEN_LEN
        stored_checksum = int.from_bytes(full_bytes[HEADER_MAGIC_LEN:HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN], 'big')
        data_len = int.from_bytes(full_bytes[HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN:header_end], 'big')
        data_start, data_end = header_end, header_end + data_len
        if len(full_bytes) < data_end:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.")
        data = full_bytes[data_start:data_end]
        calculated_checksum = zlib.crc32(data)
        if calculated_checksum != stored_checksum:
            raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã. –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return data

    @staticmethod
    def _embed_with_parity(pixel_value: int, bit_to_embed: int) -> int:
        if (pixel_value % 2) != bit_to_embed:
            return pixel_value - 1 if pixel_value % 2 != 0 and pixel_value > 0 else pixel_value + 1
        return pixel_value

    @staticmethod
    @numba.jit(nopython=True)
    def _embed_bits_numba(pixels_flat, indices, bits):
        """
        –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º–∞—è Numba-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏ –±–∏—Ç–æ–≤.
        –ó–∞–º–µ–Ω—è–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π Python-—Ü–∏–∫–ª.
        """
        for i in range(len(indices)):
            idx = indices[i]
            bit_to_embed = bits[i]
            pixel_val = pixels_flat[idx]

            # –õ–æ–≥–∏–∫–∞ _embed_with_parity
            if (pixel_val % 2) != bit_to_embed:
                if pixel_val > 0 and (pixel_val % 2) != 0:
                    pixels_flat[idx] -= 1
                elif pixel_val < 255:
                    pixels_flat[idx] += 1
                else:  # –ï—Å–ª–∏ pixel_val == 255
                    pixels_flat[idx] -= 1
        return pixels_flat

    # Numba-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è AELSB
    @staticmethod
    @numba.jit(nopython=True)
    def _embed_bits_aelsb_numba(pixels_flat_rgb, pixel_indices, channel_indices, data_bits):
        """
        –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º–∞—è Numba-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏ –±–∏—Ç–æ–≤ –≤ AELSB.
        """
        for i in range(len(pixel_indices)):
            pixel_idx = pixel_indices[i]
            channel = channel_indices[i]
            bit = data_bits[i]

            pixel_val = pixels_flat_rgb[pixel_idx, channel]

            if (pixel_val % 2) != bit:
                if pixel_val > 0 and (pixel_val % 2) != 0:
                    pixels_flat_rgb[pixel_idx, channel] -= 1
                elif pixel_val < 255:
                    pixels_flat_rgb[pixel_idx, channel] += 1
                else:
                    pixels_flat_rgb[pixel_idx, channel] -= 1

    # ---------- LSB (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ----------
    @staticmethod
    def hide_lsb(container_path: str, data: bytes, password: str, output_path: str,
                 progress_callback=None, cancel_event=None):
        try:
            with Image.open(container_path) as img:
                if img.mode not in ['RGB', 'RGBA']:
                    img = img.convert('RGB')
                pixels = np.array(img, dtype=np.uint8)
                height, width, _ = pixels.shape
                full_data = AdvancedStego._pack_data_with_header(data)
                total_bits_needed = len(full_data) * 8
                available_bits = height * width * 3
                if total_bits_needed > available_bits:
                    raise ValueError(f"–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–∞–∫—Å–∏–º—É–º: {available_bits // 8} –±–∞–π—Ç")
                data_bits = np.unpackbits(np.frombuffer(full_data, dtype=np.uint8))
                pixels_flat = pixels.reshape(-1)
                pixels_flat[:total_bits_needed] = (pixels_flat[:total_bits_needed] & 0xFE) | data_bits

                for i in range(0, total_bits_needed, 1000):
                    if progress_callback:
                        progress_callback((i / total_bits_needed) * 100)
                    if cancel_event and cancel_event.is_set():
                        raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                result_img = Image.fromarray(pixels)
                result_img.save(output_path, format='PNG', optimize=True)
                if progress_callback: progress_callback(100.0)
        except Exception as e:
            raise e

    @staticmethod
    def extract_lsb(image_path: str, password: str, progress_callback=None, cancel_event=None) -> bytes:
        try:
            with Image.open(image_path) as img:
                if img.mode not in ['RGB', 'RGBA']:
                    img = img.convert('RGB')
                pixels = np.array(img)
                pixels_flat = pixels.reshape(-1)
                header_bits_needed = HEADER_FULL_LEN * 8
                if pixels_flat.size < header_bits_needed:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.")

                header_bits = (pixels_flat[:header_bits_needed] & 1)
                header_bytes = np.packbits(header_bits).tobytes()

                if header_bytes[:HEADER_MAGIC_LEN] != MAGIC_BYTES:
                    raise ValueError("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                data_len = int.from_bytes(header_bytes[HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN:HEADER_FULL_LEN], 'big')
                if not (0 <= data_len <= (pixels.size // 8)):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.")

                total_bits_to_extract = (HEADER_FULL_LEN + data_len) * 8
                if pixels_flat.size < total_bits_to_extract:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

                all_bits = (pixels_flat[:total_bits_to_extract] & 1)
                full_bytes = np.packbits(all_bits).tobytes()

                if progress_callback: progress_callback(100.0)
                return AdvancedStego._unpack_data_with_header(full_bytes)
        except Exception as e:
            raise e

    # ---------- Adaptive-Noise ----------
    @staticmethod
    def hide_noise(container_path: str, data: bytes, password: str, output_path: str,
                   progress_callback=None, cancel_event=None):
        try:
            rng = _generate_rng(password, "noise")
            with Image.open(container_path) as img:
                if img.mode not in ['RGB', 'RGBA']:
                    img = img.convert('RGB')
                pixels = np.array(img, dtype=np.uint8)
                full_data = AdvancedStego._pack_data_with_header(data)
                total_bits_needed = len(full_data) * 8
                if total_bits_needed > pixels.size:
                    raise ValueError("–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                data_bits = np.unpackbits(np.frombuffer(full_data, dtype=np.uint8))

                indices = np.arange(pixels.size)
                rng.shuffle(indices)
                selected_indices = indices[:total_bits_needed]

                pixels_flat = pixels.reshape(-1)

                # *** –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í—ã–∑–æ–≤ Numba-—Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–∞ ***
                AdvancedStego._embed_bits_numba(pixels_flat, selected_indices, data_bits)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–¥–µ–ª–∞–Ω–∞
                if progress_callback: progress_callback(100.0)
                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                result_img = Image.fromarray(pixels)
                # –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å compress_level=1
                result_img.save(output_path, format='PNG', compress_level=1)
        except Exception as e:
            raise e

    @staticmethod
    def extract_noise(image_path: str, password: str, progress_callback=None, cancel_event=None) -> bytes:
        try:
            rng = _generate_rng(password, "noise")
            with Image.open(image_path) as img:
                if img.mode not in ['RGB', 'RGBA']:
                    img = img.convert('RGB')
                pixels = np.array(img)
                indices = np.arange(pixels.size)
                rng.shuffle(indices)
                pixels_flat = pixels.reshape(-1)

                header_bits_needed = HEADER_FULL_LEN * 8
                header_indices = indices[:header_bits_needed]

                # *** –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ***
                header_bits = (pixels_flat[header_indices] & 1)
                header_bytes = np.packbits(header_bits).tobytes()

                if header_bytes[:HEADER_MAGIC_LEN] != MAGIC_BYTES:
                    raise ValueError("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                data_len = int.from_bytes(header_bytes[HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN:HEADER_FULL_LEN], 'big')
                if not (0 <= data_len <= (pixels.size // 8)):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö.")

                total_bits_needed = (HEADER_FULL_LEN + data_len) * 8
                all_indices = indices[:total_bits_needed]

                # *** –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ***
                extracted_bits = (pixels_flat[all_indices] & 1)

                full_bytes = np.packbits(extracted_bits).tobytes()
                if progress_callback: progress_callback(100.0)
                return AdvancedStego._unpack_data_with_header(full_bytes)
        except Exception as e:
            raise e

    # ---------- AELSB++ (Content-Adaptive + Hamming(7,3) + LSB matching) ----------
    @staticmethod
    def _hill_cost_map(img: Image.Image) -> np.ndarray:
        """
        HILL-–ø–æ–¥–æ–±–Ω–∞—è –∫–∞—Ä—Ç–∞ '—Å—Ç–æ–∏–º–æ—Å—Ç–∏' –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        –ß–µ–º –º–µ–Ω—å—à–µ cost, —Ç–µ–º –ª—É—á—à–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.
        –°—Ç—Ä–æ–∏–º –Ω–∞ '—Å–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º' –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (LSB –æ–±–Ω—É–ª–µ–Ω—ã) –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞.
        """
        # –°–∞–Ω–∏—Ä—É–µ–º LSB, —á—Ç–æ–±—ã –∏ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏, –∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏
        # –∫–∞—Ä—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—ã–ª–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π.
        rgb = np.array(img, dtype=np.uint8)
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º LSB —Å –ø–æ–º–æ—â—å—é –ø–æ–±–∏—Ç–æ–≤–æ–≥–æ AND —Å 0xFE (...11111110)
        sanitized = (rgb & 0xFE).astype(np.uint8)
        gray = Image.fromarray(sanitized).convert('L')
        g = np.array(gray, dtype=np.float32)

        # –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (–ø–æ –º–æ—Ç–∏–≤–∞–º HILL)
        hp = np.array([[-1, 2, -1],
                       [2, -4, 2],
                       [-1, 2, -1]], dtype=np.float32)

        res = ndimage.convolve(g, hp, mode='reflect')
        mag = np.abs(res)

        # –ù–µ–±–æ–ª—å—à–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤—É—é –∫–∞—Ä—Ç—É
        smooth = ndimage.uniform_filter(mag, size=5, mode='reflect')
        # –ß–µ–º –≤—ã—à–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω–æ—Å—Ç—å, —Ç–µ–º –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
        cost = 1.0 / (smooth + 1.0)
        return cost  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –≤–∞–∂–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫

    @staticmethod
    def _prepare_calsb_indices(pixels: np.ndarray, base_cost: np.ndarray,
                               rng: np.random.Generator, needed_elements: int) -> Tuple[np.ndarray, np.ndarray]:
        """
        –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç RNG.
        –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–∫—Ä—ã—Ç–∏–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏.
        """
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if pixels.ndim != 3 or pixels.shape[2] < 3:
            raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ RGB.")
        h, w, _ = pixels.shape
        total = h * w * 3
        if needed_elements > total:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è.")

        indices = np.arange(total, dtype=np.int64)
        rng.shuffle(indices)
        chosen = indices[:needed_elements]
        pixel_idx = (chosen // 3).astype(np.int64)
        channel_idx = (chosen % 3).astype(np.int64)
        return pixel_idx, channel_idx

    @staticmethod
    @numba.jit(nopython=True)
    def _embed_hamming73_numba(pixels_flat_rgb, pixel_indices, channel_indices, bits, groups):
        bits_len = bits.shape[0]
        for g in range(groups):
            base = g * 7

            v0 = pixels_flat_rgb[pixel_indices[base + 0], channel_indices[base + 0]] & 1
            v1 = pixels_flat_rgb[pixel_indices[base + 1], channel_indices[base + 1]] & 1
            v2 = pixels_flat_rgb[pixel_indices[base + 2], channel_indices[base + 2]] & 1
            v3 = pixels_flat_rgb[pixel_indices[base + 3], channel_indices[base + 3]] & 1
            v4 = pixels_flat_rgb[pixel_indices[base + 4], channel_indices[base + 4]] & 1
            v5 = pixels_flat_rgb[pixel_indices[base + 5], channel_indices[base + 5]] & 1
            v6 = pixels_flat_rgb[pixel_indices[base + 6], channel_indices[base + 6]] & 1

            s0 = (v0 + v2 + v4 + v6) & 1
            s1 = (v1 + v2 + v5 + v6) & 1
            s2 = (v3 + v4 + v5 + v6) & 1

            b0_idx = g * 3
            m0 = bits[b0_idx] if b0_idx < bits_len else 0
            b1_idx = b0_idx + 1
            m1 = bits[b1_idx] if b1_idx < bits_len else 0
            b2_idx = b0_idx + 2
            m2 = bits[b2_idx] if b2_idx < bits_len else 0

            ds0 = s0 ^ m0
            ds1 = s1 ^ m1
            ds2 = s2 ^ m2
            syn = ds0 + (ds1 << 1) + (ds2 << 2)  # 0..7

            if syn != 0:
                j = syn - 1
                idx_p = pixel_indices[base + j]
                idx_c = channel_indices[base + j]

                val = pixels_flat_rgb[idx_p, idx_c]

                # ‚îÄ‚îÄ‚îÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–ò–ö–°–ï–õ–Ø (LSB Matching) ‚îÄ‚îÄ‚îÄ
                # –≠—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ LSB –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                # –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 0 –¥–æ 255, —É—Å—Ç—Ä–∞–Ω—è—è –æ—à–∏–±–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã.
                if val == 0:
                    # –ï—Å–ª–∏ 0, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ 1
                    pixels_flat_rgb[idx_p, idx_c] = 1
                elif val == 255:
                    # –ï—Å–ª–∏ 255, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ 254
                    pixels_flat_rgb[idx_p, idx_c] = 254
                else:
                    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –º–µ–Ω—è–µ–º –Ω–∞ +1 –∏–ª–∏ -1.
                    # –≠—Ç–∞ –ø—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –º–µ–Ω—è–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å (LSB).
                    if val % 2 == 1:  # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ, –¥–µ–ª–∞–µ–º —á–µ—Ç–Ω—ã–º
                        pixels_flat_rgb[idx_p, idx_c] = val - 1
                    else:  # –ï—Å–ª–∏ —á–µ—Ç–Ω–æ–µ, –¥–µ–ª–∞–µ–º –Ω–µ—á–µ—Ç–Ω—ã–º
                        pixels_flat_rgb[idx_p, idx_c] = val + 1
                # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    @staticmethod
    @numba.jit(nopython=True)
    def _extract_hamming73_numba(pixels_flat_rgb, pixel_indices, channel_indices, groups, bits_len):
        """
        –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Hamming(7,3): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –±–∏—Ç–æ–≤ –¥–ª–∏–Ω–æ–π bits_len.
        """
        out = np.zeros(bits_len, dtype=np.uint8)
        for g in range(groups):
            base = g * 7
            v0 = pixels_flat_rgb[pixel_indices[base + 0], channel_indices[base + 0]] & 1
            v1 = pixels_flat_rgb[pixel_indices[base + 1], channel_indices[base + 1]] & 1
            v2 = pixels_flat_rgb[pixel_indices[base + 2], channel_indices[base + 2]] & 1
            v3 = pixels_flat_rgb[pixel_indices[base + 3], channel_indices[base + 3]] & 1
            v4 = pixels_flat_rgb[pixel_indices[base + 4], channel_indices[base + 4]] & 1
            v5 = pixels_flat_rgb[pixel_indices[base + 5], channel_indices[base + 5]] & 1
            v6 = pixels_flat_rgb[pixel_indices[base + 6], channel_indices[base + 6]] & 1

            s0 = (v0 + v2 + v4 + v6) & 1
            s1 = (v1 + v2 + v5 + v6) & 1
            s2 = (v3 + v4 + v5 + v6) & 1

            pos = g * 3
            if pos < bits_len:
                out[pos] = s0
            if pos + 1 < bits_len:
                out[pos + 1] = s1
            if pos + 2 < bits_len:
                out[pos + 2] = s2
        return out

    @staticmethod
    def hide_aelsb(container_path: str, data: bytes, password: str, output_path: str,
                   progress_callback=None, cancel_event=None):
        try:
            rng_order = _generate_rng(password or "", "aelsbpp_order")

            with Image.open(container_path) as img:
                # –í—Å–µ–≥–¥–∞ RGB
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                pixels = np.array(img, dtype=np.uint8)

                full_data = AdvancedStego._pack_data_with_header(data)
                data_bits = np.unpackbits(np.frombuffer(full_data, dtype=np.uint8)).astype(np.uint8)

                r, n = 3, 7
                groups = (len(data_bits) + r - 1) // r
                needed_elements = groups * n

                # –ù–æ–≤—ã–π –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                pix_idx, ch_idx = AdvancedStego._prepare_calsb_indices(pixels, None, rng_order, needed_elements)

                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                # –Ø–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å RGB
                flat_rgb = pixels.reshape(-1, 3)
                AdvancedStego._embed_hamming73_numba(flat_rgb, pix_idx, ch_idx, data_bits, groups)

                if progress_callback:
                    progress_callback(100.0)

                result_img = Image.fromarray(pixels)
                result_img.save(output_path, format='PNG', optimize=True)

        except Exception as e:
            raise e

    @staticmethod
    def extract_aelsb(image_path: str, password: str, progress_callback=None, cancel_event=None) -> bytes:
        try:
            rng_order = _generate_rng(password or "", "aelsbpp_order")
            with Image.open(image_path) as img:
                # –í—Å–µ–≥–¥–∞ RGB
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                pixels = np.array(img, dtype=np.uint8)
                flat_rgb = pixels.reshape(-1, 3)

                header_bits_needed = HEADER_FULL_LEN * 8
                r, n = 3, 7
                header_groups = (header_bits_needed + r - 1) // r
                header_elements = header_groups * n

                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                pix_idx_hdr, ch_idx_hdr = AdvancedStego._prepare_calsb_indices(pixels, None, rng_order, header_elements)

                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                header_bits = AdvancedStego._extract_hamming73_numba(flat_rgb, pix_idx_hdr, ch_idx_hdr,
                                                                     header_groups, header_bits_needed)
                header_bytes = np.packbits(header_bits).tobytes()

                if header_bytes[:HEADER_MAGIC_LEN] != MAGIC_BYTES:
                    raise ValueError("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                data_len = int.from_bytes(header_bytes[HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN:HEADER_FULL_LEN], 'big')
                if not (0 <= data_len <= (pixels.size // 8)):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö.")

                total_bits_needed = (HEADER_FULL_LEN + data_len) * 8
                total_groups = (total_bits_needed + r - 1) // r
                total_elements = total_groups * n

                # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º RNG,
                # —á—Ç–æ–±—ã –ø–æ—Ä—è–¥–æ–∫ –±—ã–ª —Ç–µ–º –∂–µ (–ø—Ä–µ—Ñ–∏–∫—Å —Å–æ–≤–ø–∞–¥—ë—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
                rng_order = _generate_rng(password or "", "aelsbpp_order")
                pix_idx_all, ch_idx_all = AdvancedStego._prepare_calsb_indices(pixels, None, rng_order, total_elements)

                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                bits = AdvancedStego._extract_hamming73_numba(flat_rgb, pix_idx_all, ch_idx_all,
                                                              total_groups, total_bits_needed)
                full_bytes = np.packbits(bits).tobytes()

                if progress_callback:
                    progress_callback(100.0)
                return AdvancedStego._unpack_data_with_header(full_bytes)
        except Exception as e:
            raise e

    @staticmethod
    def _rank_indices_by_hill(img: Image.Image,
                              rng: np.random.Generator,
                              needed_elements: int) -> Tuple[np.ndarray, np.ndarray]:
        """
        –î–∞–µ—Ç. –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø–æ HILL: –∫–≤–∞–Ω—Ç—É–µ–º cost –≤ int –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π tie-break.
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–∫—Ä—ã—Ç–∏–∏/–∏–∑–≤–ª–µ—á–µ–Ω–∏–∏.
        """
        img_rgb = img.convert('RGB')  # —Å—Ç—Ä–æ–≥–æ RGB
        pixels = np.array(img_rgb, dtype=np.uint8)
        h, w, _ = pixels.shape
        total = h * w * 3
        if needed_elements > total:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (HILL).")

        # HILL-–∫–∞—Ä—Ç–∞ –Ω–∞ —Å–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ (LSB=0)
        cost_map = AdvancedStego._hill_cost_map(img_rgb)  # (h, w) float32
        # –ö–≤–∞–Ω—Ç—É–µ–º, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ float-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        cost_q = np.round(cost_map * 1e7).astype(np.int64)  # (h, w) int64

        # –ü–æ–≤—Ç–æ—Ä –Ω–∞ –∫–∞–Ω–∞–ª—ã
        cost_flat = np.repeat(cost_q.reshape(-1), 3)  # (h*w*3,) int64

        # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ç–∞–π-–±—Ä–µ–π–∫ –æ—Ç RNG ‚Äî —Å—Ç—Ä–æ–≥–æ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω
        tie = rng.integers(0, np.iinfo(np.int64).max, size=cost_flat.size, dtype=np.int64)

        # np.lexsort: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á ‚Äî –ø–µ—Ä–≤–∏—á–Ω—ã–π
        order = np.lexsort((tie, cost_flat))  # —Å–Ω–∞—á–∞–ª–∞ cost, –ø–æ—Ç–æ–º tie

        chosen = order[:needed_elements]
        pixel_idx = (chosen // 3).astype(np.int64)
        channel_idx = (chosen % 3).astype(np.int64)
        return pixel_idx, channel_idx

    @staticmethod
    def hide_hill(container_path: str, data: bytes, password: str, output_path: str,
                  progress_callback=None, cancel_event=None):
        """
        HILL-CA LSB Matching + Hamming(7,3)
        """
        try:
            rng_order = _generate_rng(password or "", "hill_order")

            with Image.open(container_path) as img:
                img_rgb = img.convert('RGB')
                pixels = np.array(img_rgb, dtype=np.uint8)

                full_data = AdvancedStego._pack_data_with_header(data)
                data_bits = np.unpackbits(np.frombuffer(full_data, dtype=np.uint8)).astype(np.uint8)

                r, n = 3, 7
                groups = (len(data_bits) + r - 1) // r
                needed_elements = groups * n

                # –ò–Ω–¥–µ–∫—Å—ã –ø–æ HILL
                pix_idx, ch_idx = AdvancedStego._rank_indices_by_hill(img_rgb, rng_order, needed_elements)

                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                flat_rgb = pixels.reshape(-1, 3)
                AdvancedStego._embed_hamming73_numba(flat_rgb, pix_idx, ch_idx, data_bits, groups)

                if progress_callback:
                    progress_callback(100.0)

                result_img = Image.fromarray(pixels)
                result_img.save(output_path, format='PNG', optimize=True)
        except Exception as e:
            raise e

    @staticmethod
    def extract_hill(image_path: str, password: str, progress_callback=None, cancel_event=None) -> bytes:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ: —Ç–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫ –ø–æ HILL.
        """
        try:
            rng_order = _generate_rng(password or "", "hill_order")

            with Image.open(image_path) as img:
                img_rgb = img.convert('RGB')
                pixels = np.array(img_rgb, dtype=np.uint8)
                flat_rgb = pixels.reshape(-1, 3)

                header_bits_needed = HEADER_FULL_LEN * 8
                r, n = 3, 7
                header_groups = (header_bits_needed + r - 1) // r
                header_elements = header_groups * n

                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                pix_idx_hdr, ch_idx_hdr = AdvancedStego._rank_indices_by_hill(img_rgb, rng_order, header_elements)

                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                header_bits = AdvancedStego._extract_hamming73_numba(
                    flat_rgb, pix_idx_hdr, ch_idx_hdr, header_groups, header_bits_needed
                )
                header_bytes = np.packbits(header_bits).tobytes()

                if header_bytes[:HEADER_MAGIC_LEN] != MAGIC_BYTES:
                    raise ValueError("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                data_len = int.from_bytes(
                    header_bytes[HEADER_MAGIC_LEN + HEADER_CHECKSUM_LEN:HEADER_FULL_LEN], 'big'
                )
                if not (0 <= data_len <= (pixels.size // 8)):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö.")

                total_bits_needed = (HEADER_FULL_LEN + data_len) * 8
                total_groups = (total_bits_needed + r - 1) // r
                total_elements = total_groups * n

                # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RNG ‚Äî –ø–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
                rng_order = _generate_rng(password or "", "hill_order")
                pix_idx_all, ch_idx_all = AdvancedStego._rank_indices_by_hill(img_rgb, rng_order, total_elements)

                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                bits = AdvancedStego._extract_hamming73_numba(
                    flat_rgb, pix_idx_all, ch_idx_all, total_groups, total_bits_needed
                )
                full_bytes = np.packbits(bits).tobytes()

                if progress_callback:
                    progress_callback(100.0)
                return AdvancedStego._unpack_data_with_header(full_bytes)
        except Exception as e:
            raise e


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üñºÔ∏è –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ImageProcessor:
    @staticmethod
    def get_image_info(path: str) -> Tuple[int, int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ç—ã)"""
        try:
            with Image.open(path) as img:
                if img.mode not in ['RGB', 'RGBA']:
                    img = img.convert('RGB')
                w, h = img.size
                return w, h, w * h * 3  # 3 –∫–∞–Ω–∞–ª–∞ RGB
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    @staticmethod
    def create_thumbnail(path: str, max_size: Tuple[int, int] = (200, 200)) -> ImageTk.PhotoImage:
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            with Image.open(path) as img:
                img.thumbnail(max_size, Image.Resampling.BOX)
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background
                return ImageTk.PhotoImage(img)
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {str(e)}")

    @staticmethod
    def get_capacity_by_method(total_pixels: int, method: str) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ü–û–õ–ï–ó–ù–´–• –î–ê–ù–ù–´–• –≤ –±–∏—Ç–∞—Ö –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.
        –£–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞.
        """
        total_lsb_bits = total_pixels * 3  # RGB

        if method in ("lsb", "noise"):
            # –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ LSB
            capacity_bits = total_lsb_bits
        elif method in ("aelsb", "hill"):
            # –ö–æ–¥ –•—ç–º–º–∏–Ω–≥–∞ (7,3) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 7 LSB –¥–ª—è 3 –±–∏—Ç –¥–∞–Ω–Ω—ã—Ö
            capacity_bits = int(total_lsb_bits * (3 / 7))
        else:
            return 0  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥

        # –í—ã—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é —ë–º–∫–æ—Å—Ç—å
        data_capacity_bits = max(0, capacity_bits - (HEADER_FULL_LEN * 8))
        return data_capacity_bits

    # ‚îÄ‚îÄ 1. –ù–ï–í–ò–î–ò–ú–û–ï –°–ö–†–´–¢–ò–ï ‚îÄ‚îÄ
    @staticmethod
    def hide_data(container_path: str, data: bytes, password: str, output_path: str,
                  method: str = "aelsb", compression_level: int = 9,
                  progress_callback=None, cancel_event=None) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if method == "lsb":
                AdvancedStego.hide_lsb(
                    container_path, data, password, output_path,
                    progress_callback, cancel_event
                )
            elif method == "noise":
                AdvancedStego.hide_noise(
                    container_path, data, password, output_path,
                    progress_callback, cancel_event
                )
            elif method == "aelsb":
                AdvancedStego.hide_aelsb(
                    container_path, data, password, output_path,
                    progress_callback, cancel_event
                )
            elif method == "hill":
                AdvancedStego.hide_hill(
                    container_path, data, password, output_path,
                    progress_callback, cancel_event
                )
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è: {method}")
        except Exception as e:
            raise e

    @staticmethod
    def extract_data(image_path: str, password: str, method: str = None,
                     progress_callback=None, cancel_event=None) -> bytes:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞."""

        if method:
            methods_to_try = [method]
        else:
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –≤–∫–ª—é—á–∞—è HILL
            methods_to_try = ["lsb", "noise", "aelsb", "hill"]

        last_error = None

        for method_name in methods_to_try:
            try:
                if cancel_event and cancel_event.is_set():
                    raise InterruptedError("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                if progress_callback:
                    progress_callback(0, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞: {STEGANO_METHODS.get(method_name, method_name)}...")

                if method_name == "lsb":
                    extractor = AdvancedStego.extract_lsb
                elif method_name == "noise":
                    extractor = AdvancedStego.extract_noise
                elif method_name == "aelsb":
                    extractor = AdvancedStego.extract_aelsb
                elif method_name == "hill":
                    extractor = AdvancedStego.extract_hill
                else:
                    continue

                # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def internal_progress(p):
                    if progress_callback:
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        base_progress = methods_to_try.index(method_name) * (100 / len(methods_to_try))
                        scaled_progress = p / len(methods_to_try)
                        progress_callback(base_progress + scaled_progress)

                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å
                data = extractor(image_path, password, internal_progress, cancel_event)

                # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å –∏ —á–µ–∫—Å—É–º–º–∞ –≤–µ—Ä–Ω–∞
                if progress_callback:
                    progress_callback(100.0,
                                      f"–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥–æ–º: {STEGANO_METHODS.get(method_name, method_name)}!")
                return data

            except (ValueError, IndexError, InterruptedError) as e:
                # –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ç–æ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
                last_error = e
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Ç–æ–¥—É
                continue

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if isinstance(last_error, InterruptedError):
            raise last_error
        if last_error:
            raise ValueError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫—Ä—ã—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–ª.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîê –ö–õ–ê–°–° –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class PasswordDialog:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.password_correct = False
        self.dialog = tk.Toplevel(root)
        self.dialog.title("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        self.dialog.geometry("350x300")  # –£–º–µ–Ω—å—à–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞
        self.dialog.resizable(False, False)
        self.dialog.protocol("WM_DELETE_WINDOW", self._on_close)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.dialog.withdraw()
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() - self.dialog.winfo_reqwidth()) // 2
        y = (self.dialog.winfo_screenheight() - self.dialog.winfo_reqheight()) // 2
        self.dialog.geometry(f"+{x}+{y}")
        self.dialog.deiconify()

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.theme_manager = ThemeManager(self.dialog)
        self.theme_manager.set_theme("–¢—ë–º–Ω–∞—è")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.colors = self.theme_manager.colors

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.dialog, text="üîê –î–æ—Å—Ç—É–ø –∫ √òccultoNG", font=("Segoe UI", 14, "bold"),
                                style="GroupHeader.TLabel")
        title_label.pack(pady=(20, 10))

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ttk.Label(self.dialog, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", style="Secondary.TLabel")
        subtitle_label.pack(pady=(0, 15))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        self.password_var = tk.StringVar()
        self.entry = ttk.Entry(self.dialog, textvariable=self.password_var, show="*", width=30, font=("Segoe UI", 11))
        self.entry.pack(pady=5, padx=20, fill=tk.X)
        self.entry.bind("<Return>", lambda e: self.check_password())

        # –£–¥–∞–ª–µ–Ω —á–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫
        self.error_label = ttk.Label(self.dialog, text="", style="Error.TLabel")
        self.error_label.pack()

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(self.dialog)
        btn_frame.pack(pady=15)
        ttk.Button(btn_frame, text="–í–æ–π—Ç–∏", command=self.check_password, style="Accent.TButton").pack(side=tk.LEFT,
                                                                                                      padx=5)
        ttk.Button(btn_frame, text="–í—ã—Ö–æ–¥", command=self._on_close, style="TButton").pack(side=tk.LEFT, padx=5)

        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.entry.focus_set()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.dialog.transient(root)
        self.dialog.grab_set()
        root.wait_window(self.dialog)

    def check_password(self) -> None:
        entered = self.password_var.get()
        if not entered:
            self.error_label.config(text="–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        hash_obj = hashlib.sha256(entered.encode('utf-8'))
        if hash_obj.hexdigest() == PASSWORD_HASH:
            self.password_correct = True
            self.dialog.destroy()
        else:
            self.error_label.config(text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    def _on_close(self) -> None:
        self.password_correct = False
        self.dialog.destroy()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß† –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class SteganographyUltimate:
    def __init__(self):
        # –°–æ–∑–¥–∞—ë–º DnD-–æ–∫–Ω–æ
        self.root = TkinterDnD.Tk()
        self.root.title(f"√òccultoNG v{VERSION}")
        self.root.geometry("1000x800")
        self.root.minsize(800, 600)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        password_dialog = PasswordDialog(self.root)
        if not password_dialog.password_correct:
            self.root.destroy()
            return

        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            self.root.iconbitmap(default=self.resource_path("icon.ico"))
        except:
            pass

        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
        self.theme_manager = ThemeManager(self.root)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.load_settings()
        self.history = self.load_history()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.theme_manager.set_theme(self.settings.get("theme", "–¢—ë–º–Ω–∞—è"))
        self.colors = self.theme_manager.colors

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.img_path = tk.StringVar()
        self.last_progress_update_time = 0
        self.extract_img_path = tk.StringVar()
        self.data_type = tk.StringVar(value=self.settings.get("data_type", "text"))
        self.method_var = tk.StringVar(value=self.settings.get("method", "lsb"))
        self.compression_level = tk.IntVar(value=self.settings.get("compression_level", 9))
        self.current_extracted = None
        self.is_dragging = False
        self.last_update_time = 0
        self.file_path_var = tk.StringVar()

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.preview_img = None
        self.extract_preview = None
        self.text_input = None
        self.result_text = None
        self.progress_var = None
        self.progress_bar = None
        self.status_label = None
        self.history_labels = []
        self.size_info_frame = None
        self.required_size_label = None
        self.capacity_labels = {}

        # –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        self.cancel_event = threading.Event()
        self.operation_thread = None

        # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.temp_extracted_file = None

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π
        self.buttons_disabled = False

        # Toast
        self.toast_label = None
        self.toast_timer = None
        self._preview_photo = None  # –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–°–∫—Ä—ã—Ç—å"
        self._extract_photo = None  # –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ò–∑–≤–ª–µ—á—å"
        # –ó–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ False)
        self.remember_password = False  # password_dialog.remember_var.get()

        self.setup_ui()
        self.bind_drag_drop()
        self.refresh_history()

    def resource_path(self, relative_path: str) -> str:
        """ –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É """
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)

    def load_settings(self) -> dict:
        try:
            if os.path.exists(CONFIG["SETTINGS_FILE"]):
                with open(CONFIG["SETTINGS_FILE"], 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            "theme": "–¢—ë–º–Ω–∞—è",
            "method": "lsb",
            "data_type": "text",
            "compression_level": 9,
            "window_size": "1000x800"
        }

    def save_settings(self) -> None:
        settings = {
            "theme": self.theme_manager.current_theme,
            "method": self.method_var.get(),
            "data_type": self.data_type.get(),
            "compression_level": self.compression_level.get(),
            "window_size": self.root.geometry()
        }
        try:
            with open(CONFIG["SETTINGS_FILE"], 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def load_history(self) -> list:
        try:
            if os.path.exists(CONFIG["HISTORY_FILE"]):
                with open(CONFIG["HISTORY_FILE"], 'r', encoding='utf-8') as f:
                    history = json.load(f)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                    valid_history = [h for h in history if os.path.exists(h)]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    if len(valid_history) != len(history):
                        self.save_history(valid_history)
                    return valid_history[:MAX_HISTORY]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

    def save_history(self, history: list) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(CONFIG["HISTORY_FILE"], 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def save_to_history(self, path: str) -> None:
        if not path:
            return
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        hist = [path] + [h for h in self.history if h != path and os.path.exists(h)]
        self.history = hist[:MAX_HISTORY]
        self.save_history(self.history)

    def setup_ui(self) -> None:
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, style="Card.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ–Ω—é
        self.create_header(main_frame)

        # –í–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))

        self.create_hide_tab()
        self.create_extract_tab()
        self.create_settings_tab()

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar(main_frame)

        # Toast
        self.create_toast()

    def create_header(self, parent: ttk.Frame) -> None:
        header_frame = ttk.Frame(parent, style="Card.TFrame")
        header_frame.pack(fill=tk.X, pady=(0, 15))

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_frame = ttk.Frame(header_frame, style="Card.TFrame")
        title_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        title = ttk.Label(
            title_frame,
            text="√òccultoNG",
            font=("Segoe UI Variable Display", 22, "bold"),
            foreground=self.colors["accent"]
        )
        title.pack(side=tk.LEFT)

        version_label = ttk.Label(
            title_frame,
            text=f"v{VERSION}",
            font=("Segoe UI", 11),
            foreground=self.colors["text_secondary"]
        )
        version_label.pack(side=tk.LEFT, padx=(8, 0), pady=(5, 0))

        # –ú–µ–Ω—é
        menu_frame = ttk.Frame(header_frame, style="Card.TFrame")
        menu_frame.pack(side=tk.RIGHT)

        help_btn = ttk.Button(
            menu_frame,
            text="–ü–æ–º–æ—â—å",
            command=self.show_help,
            style="IconButton.TButton"
        )
        help_btn.pack(side=tk.LEFT, padx=5)

    def create_hide_tab(self) -> None:
        frame = ttk.Frame(self.notebook, style="Card.TFrame")
        self.notebook.add(frame, text="–°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        container = ttk.LabelFrame(
            frame,
            text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
            padding=15,
            style="Card.TLabelframe"
        )
        container.pack(fill=tk.X, pady=(0, 15))

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        path_frame = ttk.Frame(container, style="Card.TFrame")
        path_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(path_frame, text="–ü—É—Ç—å:", style="TLabel").pack(side=tk.LEFT)

        path_entry = ttk.Entry(
            path_frame,
            textvariable=self.img_path,
            state='readonly',
            width=50,
            style="TEntry"
        )
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        browse_btn = ttk.Button(
            path_frame,
            text="–û–±–∑–æ—Ä...",
            command=self.select_image,
            style="IconButton.TButton"
        )
        browse_btn.pack(side=tk.LEFT)

        # –ó–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        drop_frame = ttk.Frame(container, style="DropZone.TFrame")
        drop_frame.pack(fill=tk.X, pady=10)

        self.drop_label = ttk.Label(
            drop_frame,
            text="üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
            anchor="center",
            font=("Segoe UI", 12, "bold"),
            cursor="hand2",
            style="DropLabel.TLabel"
        )
        self.drop_label.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        self.drop_label.bind("<Button-1>", lambda e: self.select_image())
        # ----- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -----
        self.preview_img = ttk.Label(container)
        self.preview_img.pack(pady=5)

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        data_group = ttk.LabelFrame(
            frame,
            text="–°–∫—Ä—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ",
            padding=15,
            style="Card.TLabelframe"
        )
        data_group.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        type_frame = ttk.Frame(data_group, style="Card.TFrame")
        type_frame.pack(fill=tk.X, pady=(0, 15))

        ttk.Label(type_frame, text="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", style="TLabel").pack(side=tk.LEFT, padx=(0, 10))

        ttk.Radiobutton(
            type_frame,
            text="–¢–µ–∫—Å—Ç",
            variable=self.data_type,
            value="text",
            command=self.toggle_data_input,
            style="TRadiobutton"
        ).pack(side=tk.LEFT, padx=(0, 20))

        ttk.Radiobutton(
            type_frame,
            text="–§–∞–π–ª",
            variable=self.data_type,
            value="file",
            command=self.toggle_data_input,
            style="TRadiobutton"
        ).pack(side=tk.LEFT)

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        self.text_frame = ttk.Frame(data_group, style="Card.TFrame")
        self.text_frame.pack(fill=tk.BOTH, expand=True)

        self.text_input = scrolledtext.ScrolledText(
            self.text_frame,
            height=10,
            font=("Consolas", 10),
            wrap=tk.WORD,
            bg=self.colors["card"],
            fg=self.colors["text"],
            insertbackground=self.colors["fg"],
            selectbackground=self.colors["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=1
        )
        self.text_input.pack(fill=tk.BOTH, expand=True)

        # –§–∞–π–ª–æ–≤—ã–π –≤–≤–æ–¥
        self.file_frame = ttk.Frame(data_group, style="Card.TFrame")

        file_input_frame = ttk.Frame(self.file_frame, style="Card.TFrame")
        file_input_frame.pack(fill=tk.X, pady=(10, 0))

        ttk.Label(file_input_frame, text="–§–∞–π–ª:", style="TLabel").pack(side=tk.LEFT)

        file_entry = ttk.Entry(
            file_input_frame,
            textvariable=self.file_path_var,
            state='readonly',
            width=40,
            style="TEntry"
        )
        file_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(
            file_input_frame,
            text="–í—ã–±—Ä–∞—Ç—å...",
            command=self.select_file,
            style="IconButton.TButton"
        ).pack(side=tk.LEFT)

        options_frame = ttk.Frame(frame, style="Card.TFrame")
        options_frame.pack(fill=tk.X, pady=(0, 15))

        # –ú–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è
        method_frame = ttk.Frame(options_frame, style="Card.TFrame")
        method_frame.pack(side=tk.LEFT)

        ttk.Label(method_frame, text="–ú–µ—Ç–æ–¥:", style="TLabel").pack(side=tk.LEFT)

        method_combo = ttk.Combobox(
            method_frame,
            textvariable=self.method_var,
            values=list(STEGANO_METHODS.keys()),
            state="readonly",
            width=20,
            style="TCombobox"
        )
        method_combo.pack(side=tk.LEFT, padx=5)
        method_combo.bind("<<ComboboxSelected>>", lambda e: self.update_size_info())

        # –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è PNG
        compression_frame = ttk.Frame(options_frame, style="Card.TFrame")
        compression_frame.pack(side=tk.LEFT, padx=(20, 0))

        ttk.Label(compression_frame, text="–°–∂–∞—Ç–∏–µ PNG:", style="TLabel").pack(side=tk.LEFT, padx=(10, 0))

        compression_combo = ttk.Combobox(
            compression_frame,
            textvariable=self.compression_level,
            values=list(range(0, 10)),
            state="readonly",
            width=5,
            style="TCombobox"
        )
        compression_combo.pack(side=tk.LEFT, padx=5)

        # üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
        self.size_info = ttk.Label(
            frame,
            text="",
            font=("Segoe UI", 10),
            foreground=self.colors["text_secondary"]
        )
        self.size_info.pack(pady=(15, 5))  # üëà –ø–æ–¥–Ω—è–ª–∏ –≤—ã—à–µ
        self.size_info_frame = ttk.LabelFrame(
            frame,
            text="–ê–Ω–∞–ª–∏–∑ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
            padding=10,
            style="Card.TLabelframe"
        )
        self.size_info_frame.pack(fill=tk.X, pady=(15, 5))

        self.required_size_label = ttk.Label(self.size_info_frame, text="–¢—Ä–µ–±—É–µ—Ç—Å—è: -", style="TLabel")
        self.required_size_label.pack(anchor="w", padx=5)

        ttk.Separator(self.size_info_frame, orient="horizontal").pack(fill=tk.X, pady=5)

        self.capacity_labels = {}
        for method_key, method_name in STEGANO_METHODS.items():
            lbl = ttk.Label(self.size_info_frame, text=f"{method_name}: -", style="Secondary.TLabel")
            lbl.pack(anchor="w", padx=5)
            self.capacity_labels[method_key] = lbl
        # üìå –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∏—è ‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–¥ —à–∫–∞–ª–æ–π
        self.hide_button = ttk.Button(
            frame,
            text="üîê –°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ",
            style="Accent.TButton",
            command=self.start_hide
        )
        self.hide_button.pack(pady=(5, 15))

    def create_extract_tab(self) -> None:
        frame = ttk.Frame(self.notebook, style="Card.TFrame")
        self.notebook.add(frame, text="–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        container = ttk.LabelFrame(
            frame,
            text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏",
            padding=15,
            style="Card.TLabelframe"
        )
        container.pack(fill=tk.X, pady=(0, 15))

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        path_frame = ttk.Frame(container, style="Card.TFrame")
        path_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(path_frame, text="–ü—É—Ç—å:", style="TLabel").pack(side=tk.LEFT)

        path_entry = ttk.Entry(
            path_frame,
            textvariable=self.extract_img_path,
            state='readonly',
            width=50,
            style="TEntry"
        )
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        browse_btn = ttk.Button(
            path_frame,
            text="–û–±–∑–æ—Ä...",
            command=self.select_extract_image,
            style="IconButton.TButton"
        )
        browse_btn.pack(side=tk.LEFT)

        # ----- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -----
        self.extract_preview = ttk.Label(container)
        self.extract_preview.pack(pady=5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        result_group = ttk.LabelFrame(
            frame,
            text="–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            padding=15,
            style="Card.TLabelframe"
        )
        result_group.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        self.result_text = scrolledtext.ScrolledText(
            result_group,
            height=12,
            font=("Consolas", 10),
            wrap=tk.WORD,
            state='disabled',
            bg=self.colors["card"],
            fg=self.colors["text"],
            insertbackground=self.colors["fg"],
            selectbackground=self.colors["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=1
        )
        self.result_text.pack(fill=tk.BOTH, expand=True)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(frame, style="Card.TFrame")
        btn_frame.pack(pady=(10, 0))

        self.extract_button = ttk.Button(
            btn_frame,
            text="üîç –ò–∑–≤–ª–µ—á—å",
            style="Action.TButton",
            command=self.start_extract
        )
        self.extract_button.pack(side=tk.LEFT, padx=5)

        self.save_button = ttk.Button(
            btn_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            style="Action.TButton",
            command=self.save_extracted
        )
        self.save_button.pack(side=tk.LEFT, padx=5)

        self.copy_button = ttk.Button(
            btn_frame,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            style="Action.TButton",
            command=self.copy_extracted
        )
        self.copy_button.pack(side=tk.LEFT, padx=5)

        # –ò—Å—Ç–æ—Ä–∏—è
        hist_frame = ttk.LabelFrame(
            frame,
            text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã",
            padding=10,
            style="Card.TLabelframe"
        )
        hist_frame.pack(fill=tk.X, pady=(15, 0))

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.history_labels = []
        for i in range(MAX_HISTORY):
            lbl = ttk.Label(
                hist_frame,
                text="",
                style="History.TLabel",
                cursor="hand2"
            )
            lbl.pack(anchor="w", pady=2)
            self.history_labels.append(lbl)

    def create_settings_tab(self) -> None:
        frame = ttk.Frame(self.notebook, style="Card.TFrame")
        self.notebook.add(frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ì—Ä—É–ø–ø–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        appearance_group = ttk.LabelFrame(
            frame,
            text="–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
            padding=15,
            style="Card.TLabelframe"
        )
        appearance_group.pack(fill=tk.X, pady=(0, 15))

        ttk.Label(
            appearance_group,
            text="–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        theme_var = tk.StringVar(value=self.theme_manager.current_theme)
        theme_combo = ttk.Combobox(
            appearance_group,
            textvariable=theme_var,
            values=list(THEMES.keys()),
            state="readonly",
            style="TCombobox"
        )
        theme_combo.pack(fill=tk.X, pady=(0, 10))
        theme_combo.bind("<<ComboboxSelected>>", lambda e: self.change_theme(theme_var.get()))

        # –ì—Ä—É–ø–ø–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_group = ttk.LabelFrame(
            frame,
            text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã",
            padding=15,
            style="Card.TLabelframe"
        )
        params_group.pack(fill=tk.X, pady=(0, 15))

        # –ú–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            params_group,
            text="–ú–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        method_combo = ttk.Combobox(
            params_group,
            textvariable=self.method_var,
            values=list(STEGANO_METHODS.keys()),
            state="readonly",
            style="TCombobox"
        )
        method_combo.pack(fill=tk.X, pady=(0, 10))

        # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            params_group,
            text="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        data_type_combo = ttk.Combobox(
            params_group,
            textvariable=self.data_type,
            values=["text", "file"],
            state="readonly",
            style="TCombobox"
        )
        data_type_combo.pack(fill=tk.X, pady=(0, 10))

        # –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è PNG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            params_group,
            text="–°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è PNG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        compression_combo = ttk.Combobox(
            params_group,
            textvariable=self.compression_level,
            values=list(range(0, 10)),
            state="readonly",
            style="TCombobox"
        )
        compression_combo.pack(fill=tk.X, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(frame, style="Card.TFrame")
        btn_frame.pack(pady=20)

        self.save_settings_button = ttk.Button(
            btn_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            style="Accent.TButton",
            command=self.save_settings_ui
        )
        self.save_settings_button.pack(side=tk.LEFT, padx=10)

        self.reset_settings_button = ttk.Button(
            btn_frame,
            text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            style="TButton",
            command=self.reset_settings
        )
        self.reset_settings_button.pack(side=tk.LEFT, padx=10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        info_group = ttk.LabelFrame(
            frame,
            text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            padding=15,
            style="Card.TLabelframe"
        )
        info_group.pack(fill=tk.X, pady=(15, 0))

        info_text = f"""\
        √òccultoNG v{VERSION}  ‚Ä¢  Made with üñ§ by {AUTHOR}

        –°–æ—Å—Ç–∞–≤ ¬´–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–µ–ª—å—è¬ª:
        ‚Ä¢ Python 3.10+ ‚Äì –º–æ–∑–≥ –∏ –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        ‚Ä¢ Pillow ‚Äì –≥–ª–∞–∑–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        ‚Ä¢ OpenCV ‚Äì –∞–Ω–∞–ª–∏—Ç–∏–∫, –∏—â—É—â–∏–π ¬´—Ç–∏—Ö–∏–µ¬ª –ø–∏–∫—Å–µ–ª–∏
        ‚Ä¢ NumPy ‚Äì —Å–∫–æ—Ä–æ—Å—Ç—å, –º–∏–ª–ª–∏–æ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ
        ‚Ä¢ Tkinter + tkdnd2 ‚Äì –ª–∏—Ü–æ –∏ —Ä—É–∫–∏, —É–¥–æ–±–Ω—ã–π drag-and-drop

        –õ–∏—Ü–µ–Ω–∑–∏—è: MIT ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π, –¥–µ–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω–æ.
        """
        info_label = ttk.Label(
            info_group,
            text=info_text,
            justify=tk.LEFT,
            font=("Segoe UI", 9),
            style="Secondary.TLabel"
        )
        info_label.pack(anchor="w")

    def create_status_bar(self, parent: ttk.Frame) -> None:
        status_frame = ttk.Frame(parent, style="StatusBar.TFrame")
        status_frame.pack(fill=tk.X, pady=(10, 0))

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            mode="determinate",
            style="TProgressbar"
        )
        self.progress_bar.pack(fill=tk.X, side=tk.LEFT, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        self.cancel_button = ttk.Button(
            status_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.cancel_operation,
            style="TButton"
        )
        self.cancel_button.pack(side=tk.RIGHT, padx=(10, 0))

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            status_frame,
            text="–ì–æ—Ç–æ–≤",
            font=("Segoe UI", 9),
            foreground=self.colors["text_secondary"],
            style="Secondary.TLabel"
        )
        self.status_label.pack(side=tk.RIGHT, padx=(10, 0))

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        self.progress_bar.pack_forget()
        self.cancel_button.pack_forget()

    def create_toast(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.toast_label = tk.Label(
            self.root,
            text="",
            font=("Segoe UI", 10, "bold"),
            padx=15,
            pady=8,
            relief="solid",
            bd=0,
            bg=self.colors.get("shadow", "#333333"),
            fg=self.colors.get("text", "#ffffff"),
            highlightthickness=1,
            highlightcolor=self.colors.get("accent", "#58A6FF")
        )
        self.toast_label.place_forget()

    def show_toast(self, message: str, duration: int = 2000) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.toast_timer:
            self.root.after_cancel(self.toast_timer)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.toast_label.config(text=message)
        self.toast_label.place(relx=0.5, rely=0.9, anchor="center")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ duration –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        self.toast_timer = self.root.after(duration, self.hide_toast)

    def hide_toast(self) -> None:
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.toast_label.place_forget()
        self.toast_timer = None

    def on_drag_enter(self, event):
        # –ê–∫—Ü–µ–Ω—Ç–∏—Ä—É–µ–º –¥—Ä–æ–ø-–∑–æ–Ω—É
        self.drop_label.configure(style="DropLabelActive.TLabel")

    def on_drag_leave(self, event):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–æ–∫–æ–π–Ω—ã–π –≤–∏–¥
        self.drop_label.configure(style="DropLabel.TLabel")

    def animate_drop(self) -> None:
        original_text = self.drop_label.cget("text")
        self.drop_label.configure(text="‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!", style="DropLabelActive.TLabel")
        self.root.after(1500, lambda: self.drop_label.configure(text=original_text, style="DropLabel.TLabel"))

    def bind_drag_drop(self) -> None:
        self.drop_label.drop_target_register(DND_FILES)
        self.drop_label.dnd_bind('<<DragEnter>>', self.on_drag_enter)
        self.drop_label.dnd_bind('<<DragLeave>>', self.on_drag_leave)
        self.drop_label.dnd_bind('<<Drop>>', self.on_drop_image)

    def on_drop_image(self, event: tk.Event) -> None:
        path = event.data.strip('{}')
        if os.path.isfile(path) and Utils.is_image_file(path):
            self.img_path.set(path)
            self.update_size_info()
            self.animate_drop()
            self.show_toast("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.update_thumbnail(path, self.preview_img)

        else:
            messagebox.showwarning(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: PNG, BMP, TIFF, TGA, JPG, JPEG"
            )

    def show_image_preview(self, image_path: str) -> None:
        """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."""
        if not os.path.exists(image_path):
            return

        preview_win = tk.Toplevel(self.root)
        preview_win.title(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ‚Äì {os.path.basename(image_path)}")
        preview_win.geometry("600x600")
        preview_win.resizable(True, True)
        preview_win.transient(self.root)
        preview_win.grab_set()
        preview_win.focus_set()
        preview_win.bind("<Escape>", lambda e: preview_win.destroy())

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        with Image.open(image_path) as img:
            img.thumbnail((550, 550), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(img)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        frame = ttk.Frame(preview_win, style="Card.TFrame")
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ú–µ—Ç–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        lbl = ttk.Label(frame, image=photo, style="Card.TFrame")
        lbl.image = photo  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
        lbl.pack(fill=tk.BOTH, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=preview_win.destroy)
        close_btn.pack(pady=10)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() - preview_win.winfo_reqwidth()) // 2
        y = (self.root.winfo_screenheight() - preview_win.winfo_reqheight()) // 2
        preview_win.geometry(f"+{x}+{y}")

    def select_image(self) -> None:
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
            filetypes=SUPPORTED_FORMATS
        )
        if path:
            self.img_path.set(path)
            self.update_size_info()
            self.update_thumbnail(path, self.preview_img)

    def select_extract_image(self) -> None:
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏",
            filetypes=SUPPORTED_FORMATS
        )
        if path:
            self.extract_img_path.set(path)
            self.update_thumbnail(path, self.extract_preview)

    def select_file(self) -> None:
        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è")
        if path:
            file_size = os.path.getsize(path) / (1024 * 1024)  # MB
            if file_size > CONFIG["MAX_FILE_SIZE_MB"]:
                messagebox.showwarning(
                    "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {CONFIG['MAX_FILE_SIZE_MB']} –ú–ë"
                )
                return
            self.file_path_var.set(path)
            self.update_size_info()

    def toggle_data_input(self) -> None:
        if self.data_type.get() == "text":
            self.file_frame.pack_forget()
            self.text_frame.pack(fill=tk.BOTH, expand=True)
        else:
            self.text_frame.pack_forget()
            self.file_frame.pack(fill=tk.X, pady=(10, 0))
        self.update_size_info()

    def update_size_info(self) -> None:
        current_time = time.time()
        if current_time - self.last_update_time < 0.2:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            return
        self.last_update_time = current_time

        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏
        self.required_size_label.config(text="–¢—Ä–µ–±—É–µ—Ç—Å—è: -")
        for method_key, lbl in self.capacity_labels.items():
            lbl.config(text=f"{STEGANO_METHODS[method_key]}: -", style="Secondary.TLabel")

        try:
            img_path = self.img_path.get()
            if not img_path or not os.path.exists(img_path):
                self.required_size_label.config(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", style="Error.TLabel")
                return

            w, h, _ = ImageProcessor.get_image_info(img_path)
            total_pixels = w * h

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            required_data_bytes = 0
            if self.data_type.get() == "text":
                text = self.text_input.get("1.0", tk.END).strip()
                if not text:
                    self.required_size_label.config(text="–¢–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥—ë–Ω", style="Warning.TLabel")
                    return
                required_data_bytes = len(text.encode('utf-8'))
            else:
                file_path = self.file_path_var.get()
                if not os.path.exists(file_path):
                    self.required_size_label.config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", style="Warning.TLabel")
                    return
                required_data_bytes = os.path.getsize(file_path)

            total_required_bits = (required_data_bytes + HEADER_FULL_LEN) * 8
            self.required_size_label.config(
                text=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {Utils.format_size(required_data_bytes)}",
                style="TLabel"
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
            selected_method = self.method_var.get()

            for method_key, lbl in self.capacity_labels.items():
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤ –±–∏—Ç–∞—Ö (–∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ –≤—ã—á—Ç–µ–Ω)
                available_data_bits = ImageProcessor.get_capacity_by_method(total_pixels, method_key)
                available_data_bytes = available_data_bits / 8

                if available_data_bits <= 0:
                    lbl.config(text=f"{STEGANO_METHODS[method_key]}: 0 B", style="Error.TLabel")
                    continue

                # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç –ü–û–õ–ï–ó–ù–û–ô –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞
                usage_percent = (
                                        required_data_bytes * 8 / available_data_bits) * 100 if available_data_bits > 0 else 999

                if usage_percent <= 70:
                    style = "Success.TLabel"
                elif usage_percent <= 100:
                    style = "Warning.TLabel"
                else:
                    style = "Error.TLabel"

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
                prefix = "‚ñ∂ " if method_key == selected_method else "  "

                info_text = (f"{prefix}{STEGANO_METHODS[method_key]}: "
                             f"{Utils.format_size(available_data_bytes)} "
                             f"({usage_percent:.1f}%)")

                lbl.config(text=info_text, style=style)

        except Exception as e:
            self.required_size_label.config(text=f"–û—à–∏–±–∫–∞: {Utils.truncate_path(str(e), 50)}", style="Error.TLabel")

    def update_thumbnail(self, path: str, target_label: tk.Widget) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É 200√ó200 –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ."""
        try:
            with Image.open(path) as img:
                img.thumbnail((200, 200), Image.Resampling.BOX)
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background
                tk_img = ImageTk.PhotoImage(img)
                target_label.configure(image=tk_img)
                target_label.image = tk_img  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
        except Exception as e:
            target_label.configure(image='', text=f'–û—à–∏–±–∫–∞: {e}')

    def validate_before_hide(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
        img_path = self.img_path.get()
        if not img_path or not os.path.exists(img_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            w, h, total_bits = ImageProcessor.get_image_info(img_path)
            if w < 100 or h < 100:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                       "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –º–µ–Ω–µ–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if self.data_type.get() == "text":
            text = self.text_input.get("1.0", tk.END).strip()
            if not text:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤–≤–µ–¥—ë–Ω")
                return False
        else:
            file_path = self.file_path_var.get()
            if not file_path or not os.path.exists(file_path):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

        return True

    def start_hide(self) -> None:
        if self.buttons_disabled:
            return
        if not self.validate_before_hide():
            return
        self.operation_thread = threading.Thread(target=self.hide_data, daemon=True)
        self.operation_thread.start()

    def hide_data(self) -> None:
        try:
            self.set_progress_mode(True, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.toggle_buttons(False)
            self.cancel_event.clear()

            img_path = self.img_path.get()
            if not img_path or not os.path.exists(img_path):
                raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if self.data_type.get() == "text":
                text = self.text_input.get("1.0", tk.END).strip()
                if not text:
                    raise ValueError("–¢–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤–≤–µ–¥—ë–Ω")
                data = text.encode('utf-8')
            else:
                file_path = self.file_path_var.get()
                if not file_path or not os.path.exists(file_path):
                    raise ValueError("–§–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                with open(file_path, 'rb') as f:
                    data = f.read()

            # –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏",
                defaultextension=".png",
                filetypes=[("PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png")]
            )
            if not output:
                self.set_progress_mode(False)
                self.toggle_buttons(True)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            required_space_mb = os.path.getsize(img_path) / (1024 * 1024) * 1.1
            free_space_mb = Utils.get_free_space_mb(os.path.dirname(output) or '.')

            if free_space_mb < required_space_mb:
                raise ValueError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: {Utils.format_size(required_space_mb * 1024 * 1024)}, –î–æ—Å—Ç—É–ø–Ω–æ: {Utils.format_size(free_space_mb * 1024 * 1024)}")

            start_time = time.time()

            def progress_callback(progress: float) -> None:
                if self.cancel_event.is_set():
                    raise Exception("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                current_time = time.time()
                if current_time - self.last_progress_update_time < 0.1 and progress < 100:  # –û–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ —á–∞—â–µ 10 —Ä–∞–∑/—Å–µ–∫
                    return
                self.last_progress_update_time = current_time

                elapsed_time = current_time - start_time
                speed = progress / 100 * len(data) / elapsed_time if elapsed_time > 0 else 0
                self.root.after(0, lambda: self.progress_var.set(progress))
                self.root.after(0, lambda: self.status_label.config(
                    text=f"–°–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö... {progress:.1f}% | {Utils.format_size(speed)}/s"
                ))

            ImageProcessor.hide_data(
                img_path,
                data,
                "",  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
                output,
                method=self.method_var.get(),
                compression_level=self.compression_level.get(),
                progress_callback=progress_callback,
                cancel_event=self.cancel_event
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(output)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.root.after(0, lambda: messagebox.showinfo(
                "–£—Å–ø–µ—Ö",
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output}"
            ))

        except Exception as e:
            if str(e) == "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º":
                self.root.after(0, lambda: messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–û–ø–µ—Ä–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."))
            else:
                error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}"
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è
                if "too small" in str(e).lower() or "—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–ª—è –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö.\n- –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö."
                elif "not enough space" in str(e).lower() or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                elif "file not found" in str(e).lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_msg))
        finally:
            self.set_progress_mode(False)
            self.toggle_buttons(True)

    def start_extract(self) -> None:
        if self.buttons_disabled:
            return
        self.operation_thread = threading.Thread(target=self.extract_data, daemon=True)
        self.operation_thread.start()

    def extract_data(self) -> None:
        try:
            self.set_progress_mode(True, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é...")
            self.toggle_buttons(False)
            self.cancel_event.clear()
            path = self.extract_img_path.get()
            if not path or not os.path.exists(path):
                raise ValueError("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
            start_time = time.time()

            def progress_callback(progress, message=None):
                if self.cancel_event.is_set():
                    raise Exception("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                current_time = time.time()
                if current_time - self.last_progress_update_time < 0.1 and progress < 100:
                    return
                self.last_progress_update_time = current_time

                self.root.after(0, lambda: self.progress_var.set(progress))
                status_text = message if message else f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... {progress:.1f}%"
                self.root.after(0, lambda: self.status_label.config(text=status_text))

            # –ü–µ—Ä–µ–¥–∞–µ–º None –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞
            extracted = ImageProcessor.extract_data(
                path,
                "",  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
                None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
                progress_callback,
                self.cancel_event
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            try:
                text = extracted.decode('utf-8')
                self.current_extracted = ('text', text)
                self.root.after(0, lambda: self.result_text.config(state='normal'))
                self.root.after(0, lambda: self.result_text.delete("1.0", tk.END))
                self.root.after(0, lambda: self.result_text.insert("1.0", text))
                self.root.after(0, lambda: self.result_text.config(state='disabled'))
            except UnicodeDecodeError:
                # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                    tmp_file.write(extracted)
                    tmp_file_path = tmp_file.name
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                mime_type, encoding = mimetypes.guess_type(tmp_file_path)
                if mime_type:
                    ext = mimetypes.guess_extension(mime_type)
                    if ext:
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                        new_name = tmp_file_path + ext
                        os.rename(tmp_file_path, new_name)
                        tmp_file_path = new_name
                self.current_extracted = ('binary', tmp_file_path)
                self.root.after(0, lambda: self.result_text.config(state='normal'))
                self.root.after(0, lambda: self.result_text.delete("1.0", tk.END))
                self.root.after(0, lambda: self.result_text.insert(
                    "1.0",
                    f"–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(extracted)} –±–∞–π—Ç\n" +
                    f"–•–µ—à SHA-256: {hashlib.sha256(extracted).hexdigest()}\n" +
                    f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {tmp_file_path}"
                ))
                self.root.after(0, lambda: self.result_text.config(state='disabled'))
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(path)

        except Exception as e:
            if str(e) == "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º":
                self.root.after(0, lambda: messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."))
            else:
                error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}"
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è
                if "incorrect data length" in str(e).lower() or "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –í –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è).\n- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.\n- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–æ–º."
                elif "file not found" in str(e).lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_msg))
        finally:
            self.set_progress_mode(False)
            self.toggle_buttons(True)

    def save_extracted(self) -> None:
        if not self.current_extracted:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
        data_type, content = self.current_extracted
        if data_type == 'text':
            path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            if path:
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {path}")
        else:
            # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞
            mime_type, encoding = mimetypes.guess_type(content)
            default_ext = ".bin"
            filetypes = [("–ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã", "*.bin"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            if mime_type:
                ext = mimetypes.guess_extension(mime_type)
                if ext:
                    default_ext = ext
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
                    desc = mime_type.split('/')[0].capitalize() + " —Ñ–∞–π–ª—ã"
                    filetypes.insert(0, (desc, f"*{ext}"))

            path = filedialog.asksaveasfilename(
                defaultextension=default_ext,
                filetypes=filetypes
            )
            if path:
                shutil.copy(content, path)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {path}")

    def copy_extracted(self) -> None:
        if not self.current_extracted:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        data_type, content = self.current_extracted
        if data_type == 'text':
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            self.status_label.config(text="–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä")

    def set_progress_mode(self, active: bool, message: str = None) -> None:
        if active:
            self.progress_bar.pack(fill=tk.X, side=tk.LEFT, expand=True)
            self.cancel_button.pack(side=tk.RIGHT, padx=(10, 0))
            self.progress_var.set(0)
            if message:
                self.status_label.config(text=message)
        else:
            self.progress_bar.pack_forget()
            self.cancel_button.pack_forget()
            self.progress_var.set(0)
            self.status_label.config(text="–ì–æ—Ç–æ–≤")

    def toggle_buttons(self, enable: bool) -> None:
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.buttons_disabled = not enable
        state = "normal" if enable else "disabled"
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Å–∫—Ä—ã—Ç–∏—è
        self.hide_button.config(state=state)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.extract_button.config(state=state)
        self.save_button.config(state=state)
        self.copy_button.config(state=state)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.save_settings_button.config(state=state)
        self.reset_settings_button.config(state=state)

    def cancel_operation(self) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        self.cancel_event.set()
        self.status_label.config(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...")

    def refresh_history(self) -> None:
        for i, lbl in enumerate(self.history_labels):
            if i < len(self.history):
                lbl.config(
                    text=f"{i + 1}. {Utils.truncate_path(self.history[i])}",
                    style="History.TLabel"
                )
                lbl.bind("<Button-1>", lambda e, idx=i: self.load_from_history(idx))
            else:
                lbl.config(text="", cursor="")

    def load_from_history(self, idx: int) -> None:
        if idx < len(self.history):
            path = self.history[idx]
            if os.path.exists(path):
                self.extract_img_path.set(path)
            else:
                messagebox.showwarning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "–§–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω.")
                del self.history[idx]
                self.refresh_history()

    def change_theme(self, theme_name: str) -> None:
        self.theme_manager.set_theme(theme_name)
        self.colors = self.theme_manager.colors
        self.refresh_history()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–∫–∞—Ö
        if hasattr(self, 'size_info'):
            self.size_info.config(foreground=self.colors["text_secondary"])
        if hasattr(self, 'status_label'):
            self.status_label.config(foreground=self.colors["text_secondary"])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        self.check_theme_contrast()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ç–∏–ª—è–º–∏ ttk
        if self.text_input:
            self.text_input.config(
                bg=self.colors["card"],
                fg=self.colors["text"],
                insertbackground=self.colors["fg"],
                selectbackground=self.colors["accent"],
                selectforeground="#ffffff"
            )
        if self.result_text:
            self.result_text.config(
                bg=self.colors["card"],
                fg=self.colors["text"],
                insertbackground=self.colors["fg"],
                selectbackground=self.colors["accent"],
                selectforeground="#ffffff"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.toast_label:
            self.toast_label.config(
                bg=self.colors.get("shadow", "#333333"),
                fg=self.colors.get("text", "#ffffff"),
                highlightcolor=self.colors.get("accent", "#58A6FF")
            )

    def check_theme_contrast(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–º—ã –ø–æ WCAG"""
        c = self.colors
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ–Ω–æ–º
        contrast_ratio = Utils.get_contrast_ratio(c["fg"], c["bg"])
        if contrast_ratio < 4.5:  # WCAG AA standard
            print(
                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∑–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞ –≤ —Ç–µ–º–µ '{self.theme_manager.current_theme}'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–µ –º–µ–Ω–µ–µ 4.5:1 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

    def save_settings_ui(self) -> None:
        self.save_settings()
        messagebox.showinfo(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n" +
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
        )

    def reset_settings(self) -> None:
        if messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"
        ):
            try:
                if os.path.exists(CONFIG["SETTINGS_FILE"]):
                    os.remove(CONFIG["SETTINGS_FILE"])
                if os.path.exists(CONFIG["HISTORY_FILE"]):
                    os.remove(CONFIG["HISTORY_FILE"])
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if hasattr(self, 'temp_extracted_file') and self.temp_extracted_file and os.path.exists(
                        self.temp_extracted_file.name):
                    os.unlink(self.temp_extracted_file.name)

                messagebox.showinfo(
                    "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞."
                )
                self.root.destroy()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def show_help(self) -> None:
        help_text = f"""
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë            √òccultoNG v{VERSION} ‚Äì –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ               ‚ïë
        ‚ïë        ¬´–°–∫—Ä—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ—Ñ–∏, –∏–∑–≤–ª–µ–∫–∞–π –∫–∞–∫ –¥–µ—Ç–µ–∫—Ç–∏–≤¬ª     ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

        üìå –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?
        √òccultoNG ‚Äì —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π ¬´—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –Ω–æ–∂¬ª.
        –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ù–ï–ó–ê–ú–ï–¢–ù–û –ø—Ä—è—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
        ‚Ä¢ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –ø–∞—Ä–æ–ª–∏, –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥, –∫–ª—é—á–∏.
        ‚Ä¢ –õ—é–±—ã–µ —Ñ–∞–π–ª—ã (PDF, ZIP, EXE, –≤–∏–¥–µ–æ) —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 50 –ú–ë.

        üîê –í—Å—ë, —á—Ç–æ –≤—ã —Å–ø—Ä—è—á–µ—Ç–µ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º—ã–º –¥–ª—è –≥–ª–∞–∑–∞. –ü–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
        –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–π PNG-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª, –Ω–æ –Ω–µ—Å—ë—Ç
        –≤ —Å–µ–±–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üß© –ß–µ—Ç—ã—Ä–µ –º–µ—Ç–æ–¥–∞. –ß–µ—Ç—ã—Ä–µ —É—Ä–æ–≤–Ω—è —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏.
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        1Ô∏è‚É£ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π LSB (Least Significant Bit)
           ‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω—è–µ—Ç —Å–∞–º—ã–π –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –±–∏—Ç
             –≤ –∫–∞–∂–¥–æ–º —Ü–≤–µ—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ (R, G, B) –Ω–∞ –±–∏—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
             –≠—Ç–æ –∫–∞–∫ –ø–∏—Å–∞—Ç—å –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.
           ‚Ä¢ –ü–ª—é—Å—ã: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–æ 12.5% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞). –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ.
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –õ–µ–≥–∫–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º (—Å—Ç–µ–≥–∞–Ω–∞–ª–∏–∑–æ–º).
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ö–æ–≥–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –æ–±—ä—ë–º –≤–∞–∂–Ω–µ–µ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏.
             –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤, –≥–¥–µ –Ω–∏–∫—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ–¥–≤–æ—Ö.

        2Ô∏è‚É£ Adaptive-Noise
           ‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: "–†–∞–∑–±—Ä–∞—Å—ã–≤–∞–µ—Ç" –±–∏—Ç—ã –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–∏–∫—Å–µ–ª—è–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
             –≤ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª–µ–º (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π).
             –≠—Ç–æ –∫–∞–∫ –≤—ã—Ä–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–Ω–∏–≥–∏ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å –∏—Ö –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –ø–æ –≤—Å–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.
           ‚Ä¢ –ü–ª—é—Å—ã: –ì–æ—Ä–∞–∑–¥–æ —É—Å—Ç–æ–π—á–∏–≤–µ–µ –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å—Ç–µ–≥–∞–Ω–∞–ª–∏–∑—É, —á–µ–º LSB.
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –¢–∞ –∂–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —á—Ç–æ –∏ —É LSB, –Ω–æ —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ.
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.
             –ó–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–Ω–∞–Ω–∏—è "–∫–∞—Ä—Ç—ã" (–ø–∞—Ä–æ–ª—è).

        3Ô∏è‚É£ Adaptive-Edge-LSB (AELSB)
           ‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥ –•—ç–º–º–∏–Ω–≥–∞ (7,3). –û–Ω –±–µ—Ä—ë—Ç 3 –±–∏—Ç–∞
             –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é 7 –±–∏—Ç–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
             –≠—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.
           ‚Ä¢ –ü–ª—é—Å—ã: –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ–º–µ—Ö–∞–º –∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–∫–∞–∂–µ–Ω–∏—è–º.
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 3/7 –∏–ª–∏ ~42% –æ—Ç LSB).
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ö–æ–≥–¥–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤–∞–∂–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞.

        4Ô∏è‚É£ HILL-CA LSB Matching (Content-Adaptive)
           ‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –°–∞–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ—Ç–æ–¥. –°–Ω–∞—á–∞–ª–∞ –∞–ª–≥–æ—Ä–∏—Ç–º HILL –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç
             –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–µ "—à—É–º–Ω—ã–µ", —Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (—Ç—Ä–∞–≤–∞, –≤–æ–ª–æ—Å—ã,
             —Ä—è–±—å –Ω–∞ –≤–æ–¥–µ). –ó–∞—Ç–µ–º –æ–Ω –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞ –•—ç–º–º–∏–Ω–≥–∞ (–∫–∞–∫ –≤ AELSB),
             –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–∏, –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω—ã–µ –¥–ª—è –≥–ª–∞–∑–∞, –º–µ—Å—Ç–∞.
           ‚Ä¢ –ü–ª—é—Å—ã: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏. –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ —Ç—Ä—É–¥–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
             –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ, —Ç–∞–∫ –∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–≥—Ä–∞–º–º-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤.
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ö–æ–≥–¥–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è
             –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –≥–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–≥—É—Ç –∏–∑—É—á–∞—Ç—å.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üéÆ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: –°–∫—Ä—ã—Ç—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        1. –í–∫–ª–∞–¥–∫–∞ ¬´–°–∫—Ä—ã—Ç—å¬ª: –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
        2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.
        3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.
        4. –ù–∞–∂–º–∏—Ç–µ ¬´üîê –°–∫—Ä—ã—Ç—å¬ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–π PNG-—Ñ–∞–π–ª.

        –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–æ –≤–Ω—É—Ç—Ä–∏ ‚Äì –≤–∞—à —Å–µ–∫—Ä–µ—Ç.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –ï—â–µ –ø—Ä–æ—â–µ
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        1. –í–∫–ª–∞–¥–∫–∞ ¬´–ò–∑–≤–ª–µ—á—å¬ª: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å–∫—Ä—ã—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        2. –ù–∞–∂–º–∏—Ç–µ ¬´üîç –ò–∑–≤–ª–µ—á—å¬ª.

        –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ –ø–µ—Ä–µ–±–µ—Ä—ë—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏ –Ω–∞–π–¥—ë—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
        –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á—ë–Ω —Ñ–∞–π–ª, –µ–≥–æ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üõ†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–æ–≤–µ—Ç—ã
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PNG –±–µ–∑ —Å–∂–∞—Ç–∏—è (–∏–ª–∏ –¥—Ä—É–≥–∏–µ lossless-—Ñ–æ—Ä–º–∞—Ç—ã) –∫–∞–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
          JPG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–∂–µ –º–æ–∂–Ω–æ, –Ω–æ –∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–∂–∞—Ç–∏—è –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å.
        ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä—å –¥–∞–Ω–Ω—ã—Ö.
        ‚Ä¢ –°—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ¬´–¢—Ä–µ–±—É–µ—Ç—Å—è/–î–æ—Å—Ç—É–ø–Ω–æ¬ª –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å, –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –ª–∏ –≤–∞—à–∏
          –¥–∞–Ω–Ω—ã–µ. –ó–µ–ª—ë–Ω—ã–π ‚Äì –æ—Ç–ª–∏—á–Ω–æ, –∂—ë–ª—Ç—ã–π ‚Äì –ø—Ä–∏–µ–º–ª–µ–º–æ, –∫—Ä–∞—Å–Ω—ã–π ‚Äì —Ä–∏—Å–∫ –±—ã—Ç—å –∑–∞–º–µ—á–µ–Ω–Ω—ã–º.
        ‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª –ø—Ä–µ—Ä–≤—ë—Ç –ª—é–±—É—é –¥–æ–ª–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.

        –ê–≤—Ç–æ—Ä: {AUTHOR}

        –£–¥–∞—á–Ω—ã—Ö —Ç–∞–π–Ω—ã—Ö –¥–µ–ª! üïµÔ∏è‚Äç‚ôÇÔ∏è
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏
        help_window = tk.Toplevel(self.root)
        help_window.title("–ü–æ–º–æ—â—å")
        help_window.geometry("600x500")
        help_window.resizable(True, True)
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        help_window.transient(self.root)
        help_window.grab_set()
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_area = scrolledtext.ScrolledText(
            help_window,
            wrap=tk.WORD,
            font=("Segoe UI", 10),
            bg=self.colors["card"],
            fg=self.colors["text"],
            insertbackground=self.colors["fg"],
            selectbackground=self.colors["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=1
        )
        text_area.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        text_area.insert(tk.END, help_text)
        text_area.config(state=tk.DISABLED)
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(help_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=help_window.destroy, style="TButton")
        close_btn.pack(pady=10)

    def run(self) -> None:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if "window_size" in self.settings:
            self.root.geometry(self.settings["window_size"])
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if self.data_type.get() == "text":
            self.text_frame.pack(fill=tk.BOTH, expand=True)
            self.file_frame.pack_forget()
        else:
            self.text_frame.pack_forget()
            self.file_frame.pack(fill=tk.X, pady=(10, 0))

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.root.mainloop()

    def on_close(self) -> None:
        self.save_settings()
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if hasattr(self, 'temp_extracted_file') and self.temp_extracted_file and os.path.exists(
                self.temp_extracted_file.name):
            try:
                os.unlink(self.temp_extracted_file.name)
            except:
                pass
        self.root.destroy()


if __name__ == "__main__":
    app = SteganographyUltimate()
    if hasattr(app, 'root') and app.root.winfo_exists():
        app.run()
