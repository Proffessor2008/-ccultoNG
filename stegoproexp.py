import hashlib
import json
import mimetypes
import os
import shutil
import sys
import tempfile
import threading
import time
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from typing import Tuple, Optional, List, Callable

import cv2
import numpy as np
from PIL import Image, ImageTk
from tkinterdnd2 import DND_FILES, TkinterDnD

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üé® –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
VERSION = "0.0.7"
AUTHOR = "MustaNG"
PASSWORD_HASH = "f6ee94ecb014f74f887b9dcc52daecf73ab3e3333320cadd98bcb59d895c52f5"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è LSB-–º–µ—Ç–æ–¥–∞
HEADER_SIZE_BITS = 32  # –†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–±–∏—Ç—ã)
PROGRESS_UPDATE_INTERVAL = 1000  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±–∏—Ç—ã)
MIN_DATA_LEN = 8  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–±–∏—Ç—ã)
MAX_DATA_LEN = 100 * 1024 * 1024 * 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (100 –ú–ë –≤ –±–∏—Ç–∞—Ö)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã —Å –ø–ª–∞–≤–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
THEMES = {
    "–¢—ë–º–Ω–∞—è": {
        "name": "–¢—ë–º–Ω–∞—è",
        "bg": "#0D1117",  # –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω (GitHub Dark)
        "fg": "#E6EDF3",  # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
        "accent": "#58A6FF",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Å–∏–Ω–∏–π (GitHub Blue)
        "accent_hover": "#79B8FF",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#388BFD",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#161B22",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#3FB950",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–∑–µ–ª—ë–Ω—ã–π)
        "error": "#F85149",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#D29922",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
        "card": "#161B22",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#30363D",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#E6EDF3",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#8B949E",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#484F58",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#30363D",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#1F6FEB",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#010409",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 8,  # –†–∞–¥–∏—É—Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è
        "padding": 10,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        "border_width": 1  # –®–∏—Ä–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü
    },
    "–°–≤–µ—Ç–ª–∞—è": {
        "name": "–°–≤–µ—Ç–ª–∞—è",
        "bg": "#FFFFFF",  # –ë–µ–ª—ã–π —Ñ–æ–Ω
        "fg": "#24292F",  # –¢—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        "accent": "#0969DA",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Å–∏–Ω–∏–π
        "accent_hover": "#218BFF",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#0652A5",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#F6F8FA",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#1A7F37",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–∑–µ–ª—ë–Ω—ã–π)
        "error": "#CF222E",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#9A6700",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
        "card": "#FFFFFF",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#D0D7DE",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#24292F",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#656D76",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#ABBAC5",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#D0D7DE",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#D0EBFF",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#D0D7DE",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 8,
        "padding": 10,
        "border_width": 1
    },
    "–ö–æ—Å–º–æ—Å": {
        "name": "–ö–æ—Å–º–æ—Å",
        "bg": "#0A0A1A",  # –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        "fg": "#A0D8F1",  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ç–µ–∫—Å—Ç
        "accent": "#7B68EE",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        "accent_hover": "#9B8AFF",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#5A4FCF",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#16213E",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#00FFAA",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–∑–µ–ª—ë–Ω—ã–π)
        "error": "#FF3366",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#FFD166",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–∂—ë–ª—Ç—ã–π)
        "card": "#10102A",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#3A3A8C",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#A0D8F1",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#6A9CB5",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#4A4A8C",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#2A2A5A",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#1A1A3A",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#000000",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 10,
        "padding": 12,
        "border_width": 1
    },
    "–û–∫–µ–∞–Ω": {
        "name": "–û–∫–µ–∞–Ω",
        "bg": "#001F3F",  # –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        "fg": "#A2D5F2",  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ç–µ–∫—Å—Ç
        "accent": "#0074D9",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Å–∏–Ω–∏–π
        "accent_hover": "#339CFF",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#0056A3",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#003366",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#39FF14",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–∑–µ–ª—ë–Ω—ã–π)
        "error": "#FF4136",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#FFB74D",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
        "card": "#002B5B",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#0056B3",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#A2D5F2",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#6A9CB5",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#005588",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#004488",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#003A66",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#000000",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 8,
        "padding": 10,
        "border_width": 1
    },
    "–õ–µ—Å": {
        "name": "–õ–µ—Å",
        "bg": "#0D1F0A",  # –û—á–µ–Ω—å —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        "fg": "#C8E6C9",  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π —Ç–µ–∫—Å—Ç
        "accent": "#4CAF50",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π
        "accent_hover": "#81C784",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#388E3C",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#1B3E19",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#8BC34A",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–∑–µ–ª—ë–Ω—ã–π)
        "error": "#F44336",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#FFB74D",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
        "card": "#142811",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#2E7D32",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#C8E6C9",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#81C784",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#4A6947",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#2E7D32",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#1E461C",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#000000",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 10,
        "padding": 12,
        "border_width": 1
    },
    "–ù–æ—á–Ω–∞—è –ù–µ–æ–Ω–∫–∞": {
        "name": "–ù–æ—á–Ω–∞—è –ù–µ–æ–Ω–∫–∞",
        "bg": "#0F0C29",  # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        "fg": "#F0F0F0",  # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
        "accent": "#FF00CC",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π –Ω–µ–æ–Ω–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π
        "accent_hover": "#FF66FF",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#CC0099",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#302B63",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#00FF9D",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–Ω–µ–æ–Ω–æ–≤–æ-–∑–µ–ª—ë–Ω—ã–π)
        "error": "#FF3366",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–Ω–µ–æ–Ω–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#FFD166",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ–æ–Ω–æ–≤–æ-–∂—ë–ª—Ç—ã–π)
        "card": "#24243E",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#4A4A8C",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#F0F0F0",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#B0B0B0",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#6A6A8C",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#5A5A8C",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#3A3A5A",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#000000",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 12,
        "padding": 15,
        "border_width": 1
    },
    "–°–æ–ª–Ω–µ—á–Ω—ã–π –ó–∞–∫–∞—Ç": {
        "name": "–°–æ–ª–Ω–µ—á–Ω—ã–π –ó–∞–∫–∞—Ç",
        "bg": "#FFF8F0",  # –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
        "fg": "#333333",  # –¢—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        "accent": "#FF6B6B",  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        "accent_hover": "#FF8E8E",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        "accent_pressed": "#E55252",  # –ê–∫—Ü–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        "secondary": "#FFEAA7",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (–∫–∞—Ä—Ç–æ—á–∫–∏)
        "success": "#06D6A0",  # –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ (–∑–µ–ª—ë–Ω—ã–π)
        "error": "#EF476F",  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
        "warning": "#FFD166",  # –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–∂—ë–ª—Ç—ã–π)
        "card": "#FFFFFF",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        "border": "#DADADA",  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
        "text": "#333333",  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        "text_secondary": "#757575",  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        "disabled": "#BDBDBD",  # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        "scrollbar": "#CCCCCC",  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        "highlight": "#FFF2E8",  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        "shadow": "#E0E0E0",  # –¶–≤–µ—Ç —Ç–µ–Ω–µ–π
        "radius": 10,
        "padding": 12,
        "border_width": 1
    }
}

SUPPORTED_FORMATS = [("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.bmp *.tiff *.tga *.jpg *.jpeg")]
STEGANO_METHODS = {
    "lsb": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π LSB",
    "noise": "Adaptive-Noise",
    "aelsb": "Adaptive-Edge-LSB"}
SETTINGS_FILE = "stego_settings.json"
HISTORY_FILE = "stego_history.json"
MAX_HISTORY = 10
MAX_FILE_SIZE_MB = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è (–ú–ë)
CONFIG = {
    "MAX_FILE_SIZE_MB": MAX_FILE_SIZE_MB,
    "SETTINGS_FILE": SETTINGS_FILE,
    "HISTORY_FILE": HISTORY_FILE
}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üõ†Ô∏è –£–¢–ò–õ–ò–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Utils:
    @staticmethod
    def safe_int(s: str, fallback: int = 0) -> int:
        try:
            return int(s)
        except (ValueError, TypeError):
            return fallback

    @staticmethod
    def truncate_path(path: str, max_len: int = 40) -> str:
        if len(path) <= max_len:
            return path
        return "..." + path[-(max_len - 3):]

    @staticmethod
    def format_size(size_bytes: int) -> str:
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.2f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.2f} TB"

    @staticmethod
    def is_image_file(path: str) -> bool:
        try:
            with Image.open(path) as img:
                img.verify()
            return True
        except Exception:
            return False

    @staticmethod
    def get_file_checksum(file_path: str) -> str:
        hash_sha256 = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
        return hash_sha256.hexdigest()

    @staticmethod
    def get_free_space_mb(path: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –≤ –ú–ë"""
        try:
            if os.name == 'nt':  # Windows
                import ctypes
                free_bytes = ctypes.c_ulonglong(0)
                ctypes.windll.kernel32.GetDiskFreeSpaceExW(
                    ctypes.c_wchar_p(path),
                    ctypes.pointer(free_bytes),
                    None,
                    None
                )
                return free_bytes.value / (1024 * 1024)
            else:  # Unix
                statvfs = os.statvfs(path)
                return (statvfs.f_frsize * statvfs.f_bavail) / (1024 * 1024)
        except Exception:
            return float('inf')  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    @staticmethod
    def check_file_signature(file_path: str, expected_signatures: List[bytes]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as f:
                header = f.read(8)
                return any(header.startswith(sig) for sig in expected_signatures)
        except Exception:
            return False

    @staticmethod
    def calculate_brightness(color: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ WCAG"""
        color = color.lstrip('#')
        r, g, b = tuple(int(color[i:i + 2], 16) for i in (0, 2, 4))

        # sRGB to linear RGB
        def srgb_to_linear(c):
            c = c / 255.0
            if c <= 0.03928:
                return c / 12.92
            else:
                return ((c + 0.055) / 1.055) ** 2.4

        r_lin = srgb_to_linear(r)
        g_lin = srgb_to_linear(g)
        b_lin = srgb_to_linear(b)
        # Relative luminance
        L = 0.2126 * r_lin + 0.7152 * g_lin + 0.0722 * b_lin
        return L

    @staticmethod
    def get_contrast_ratio(color1: str, color2: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏"""
        L1 = Utils.calculate_brightness(color1)
        L2 = Utils.calculate_brightness(color2)
        if L1 > L2:
            return (L1 + 0.05) / (L2 + 0.05)
        else:
            return (L2 + 0.05) / (L1 + 0.05)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üé® –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–ú–ê–ú–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ThemeManager:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.style = ttk.Style()
        self.current_theme = "–¢—ë–º–Ω–∞—è"
        self.colors = THEMES[self.current_theme]

    def set_theme(self, theme_name: str) -> None:
        if theme_name not in THEMES:
            theme_name = "–¢—ë–º–Ω–∞—è"
        self.current_theme = theme_name
        self.colors = THEMES[theme_name]
        self._configure_styles()

    def _configure_styles(self) -> None:
        c = self.colors
        radius = c.get("radius", 0)
        padding = c.get("padding", 5)
        border_width = c.get("border_width", 1)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.configure(bg=c["bg"])

        # –û–±—â–∏–µ —Å—Ç–∏–ª–∏
        self.style.theme_use("clam")
        self.style.configure(".", background=c["bg"], foreground=c["fg"], font=("Segoe UI", 10))

        # –í–∫–ª–∞–¥–∫–∏
        self.style.configure("TNotebook", background=c["bg"], borderwidth=0)
        self.style.configure("TNotebook.Tab",
                             background=c["secondary"],
                             foreground=c["fg"],
                             padding=(padding + 6, padding),
                             font=("Segoe UI", 10, "bold"),
                             relief="flat",
                             borderwidth=0)
        self.style.map("TNotebook.Tab",
                       background=[("selected", c["accent"]), ("active", c["secondary"])],
                       foreground=[("selected", "#ffffff"), ("active", c["accent"])])

        # –ö–Ω–æ–ø–∫–∏
        self.style.configure("TButton",
                             background=c["secondary"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10),
                             relief="flat",
                             padding=(padding, padding),
                             borderwidth=border_width,
                             bordercolor=c["border"])
        self.style.map("TButton",
                       background=[("active", c["accent_hover"]), ("pressed", c["accent_pressed"])],
                       foreground=[("active", "#ffffff"), ("pressed", "#ffffff")])

        # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self.style.configure("Accent.TButton",
                             background=c["accent"],
                             foreground="#ffffff",
                             font=("Segoe UI", 10, "bold"),
                             padding=(padding + 2, padding),
                             borderwidth=0,
                             relief="flat")
        self.style.map("Accent.TButton",
                       background=[("active", c["accent_hover"]), ("pressed", c["accent_pressed"])])

        # –ö–∞—Ä—Ç–æ—á–∫–∏
        self.style.configure("Card.TFrame", background=c["card"])
        self.style.configure("Card.TLabelframe",
                             background=c["card"],
                             borderwidth=border_width,
                             relief="solid",
                             bordercolor=c["border"],
                             lightcolor=c["card"],
                             darkcolor=c["card"])
        self.style.configure("Card.TLabelframe.Label",
                             background=c["card"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10, "bold"))

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.style.configure("TProgressbar",
                             background=c["accent"],
                             troughcolor=c["secondary"],
                             bordercolor=c["border"],
                             lightcolor=c["accent"],
                             darkcolor=c["accent"],
                             thickness=12)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.style.configure("TEntry",
                             fieldbackground=c["card"],
                             foreground=c["text"],
                             insertcolor=c["fg"],
                             bordercolor=c["border"],
                             lightcolor=c["card"],
                             darkcolor=c["card"],
                             relief="flat",
                             borderwidth=border_width,
                             padding=(padding, padding))

        # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        self.style.configure("TCombobox",
                             fieldbackground=c["card"],
                             foreground=c["text"],
                             selectbackground=c["accent"],
                             selectforeground="#ffffff",
                             relief="flat",
                             borderwidth=border_width,
                             arrowsize=12)
        self.style.map("TCombobox",
                       fieldbackground=[("readonly", c["card"])])

        # –ú–µ—Ç–∫–∏
        self.style.configure("TLabel",
                             background=c["bg"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10))

        # –í—Ç–æ—Ä–∏—á–Ω—ã–µ –º–µ—Ç–∫–∏
        self.style.configure("Secondary.TLabel",
                             background=c["bg"],
                             foreground=c["text_secondary"],
                             font=("Segoe UI", 9))

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å
        self.style.configure("TText",
                             background=c["card"],
                             foreground=c["text"],
                             insertbackground=c["fg"],
                             selectbackground=c["accent"],
                             selectforeground="#ffffff",
                             relief="flat",
                             borderwidth=border_width)

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
        self.style.configure("TRadiobutton",
                             background=c["bg"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10),
                             padding=(0, padding))

        # –ß–µ–∫–±–æ–∫—Å—ã
        self.style.configure("TCheckbutton",
                             background=c["bg"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10),
                             padding=(0, padding))

        # –°—Ç–∏–ª—å –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.style.configure("DropZone.TFrame",
                             background=c["card"],
                             relief="groove",
                             borderwidth=border_width,
                             bordercolor=c["border"])

        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≥—Ä—É–ø–ø
        self.style.configure("GroupHeader.TLabel",
                             background=c["bg"],
                             foreground=c["accent"],
                             font=("Segoe UI", 12, "bold"))

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        self.style.configure("IconButton.TButton",
                             background=c["secondary"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10),
                             relief="flat",
                             padding=(padding - 2, padding - 4),
                             borderwidth=border_width,
                             bordercolor=c["border"])
        self.style.map("IconButton.TButton",
                       background=[("active", c["highlight"]), ("pressed", c["accent"])])

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (–∏–∑–≤–ª–µ—á—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
        self.style.configure("Action.TButton",
                             background=c["secondary"],
                             foreground=c["fg"],
                             font=("Segoe UI", 10),
                             relief="flat",
                             padding=(padding, padding),
                             borderwidth=border_width,
                             bordercolor=c["border"])
        self.style.map("Action.TButton",
                       background=[("active", c["highlight"]), ("pressed", c["accent_pressed"])])

        # –°—Ç–∏–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        self.style.configure("StatusBar.TFrame",
                             background=c["secondary"])

        # –°—Ç–∏–ª—å –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.style.configure("Toast.TLabel",
                             background="#333333",
                             foreground="#ffffff",
                             font=("Segoe UI", 10),
                             relief="solid",
                             borderwidth=1)

        # –°—Ç–∏–ª—å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.style.configure("History.TLabel",
                             background=c["card"],
                             foreground=c["text_secondary"],
                             font=("Segoe UI", 9),
                             relief="flat",
                             borderwidth=0,
                             padding=(padding, padding // 2))
        self.style.map("History.TLabel",
                       background=[("active", c["highlight"])],
                       foreground=[("active", c["accent"])])

        # –°—Ç–∏–ª—å –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.style.configure("Preview.TFrame",
                             background=c["card"],
                             relief="solid",
                             borderwidth=border_width,
                             bordercolor=c["border"])

        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–æ–∫
        self.style.configure("Error.TLabel",
                             background=c["bg"],
                             foreground=c["error"],
                             font=("Segoe UI", 10))

        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—Ö–∞
        self.style.configure("Success.TLabel",
                             background=c["bg"],
                             foreground=c["success"],
                             font=("Segoe UI", 10))

        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        self.style.configure("Warning.TLabel",
                             background=c["bg"],
                             foreground=c["warning"],
                             font=("Segoe UI", 10))

    @staticmethod
    def _adjust_color(hex_color: str, amount: int) -> str:
        """–û—Å–≤–µ—Ç–ª–∏—Ç—å –∏–ª–∏ –∑–∞—Ç–µ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç"""
        hex_color = hex_color.lstrip('#')
        rgb = tuple(int(hex_color[i:i + 2], 16) for i in (0, 2, 4))
        adjusted = []
        for c in rgb:
            c = max(0, min(255, c + amount))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 255
            adjusted.append(c)
        return f"#{adjusted[0]:02x}{adjusted[1]:02x}{adjusted[2]:02x}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üñºÔ∏è –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ImageProcessor:
    @staticmethod
    def get_image_info(path: str) -> Tuple[int, int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ç—ã)"""
        try:
            with Image.open(path) as img:
                if img.mode not in ['RGB', 'RGBA']:
                    img = img.convert('RGB')
                w, h = img.size
                channels = len(img.getbands())  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
                # –î–ª—è RGBA —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ RGB –∫–∞–Ω–∞–ª—ã (3), –¥–ª—è RGB —Ç–æ–∂–µ 3
                available_channels = channels  # RGB –∏–ª–∏ RGBA ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
                return w, h, w * h * available_channels
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    @staticmethod
    def create_thumbnail(path: str, max_size: Tuple[int, int] = (200, 200)) -> ImageTk.PhotoImage:
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            with Image.open(path) as img:
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background
                return ImageTk.PhotoImage(img)
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {str(e)}")

    # ‚îÄ‚îÄ 1.  –ù–ï–í–ò–î–ò–ú–û–ï –°–ö–†–´–¢–ò–ï (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è) ‚îÄ‚îÄ
    @staticmethod
    def hide_data(container_path: str,
                  data: bytes,
                  password: str,
                  output_path: str,
                  method: str = "lsb",
                  compression_level: int = 9,
                  progress_callback: Optional[Callable[[float], None]] = None,
                  cancel_event: Optional[threading.Event] = None) -> None:
        def update(pct, msg):
            if progress_callback:
                progress_callback(pct)
            if cancel_event and cancel_event.is_set():
                raise Exception("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

        update(0, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        with Image.open(container_path) as img:
            if img.mode not in ("RGB", "RGBA"):
                img = img.convert("RGB")
            img_array = np.array(img, dtype=np.int16)  # int16 —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ uint8-–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è

        if method == "noise":
            # --- Adaptive-Noise---
            key = hashlib.sha512(password.encode()).digest()
            rng = np.random.default_rng(np.frombuffer(key, dtype=np.uint64))
            header = len(data).to_bytes(4, "big")
            payload = header + data
            bits = ''.join(f"{b:08b}" for b in payload)
            work = img_array[:, :, :3]
            flat = work.reshape(-1)
            # Canny –±–µ–∑ –æ—à–∏–±–∫–∏
            gray = cv2.cvtColor(img_array[:, :, :3].astype(np.uint8), cv2.COLOR_RGB2GRAY)
            edges = cv2.Canny(gray, 40, 80).reshape(-1)
            safe = np.where(edges == 0)[0]
            if len(safe) < len(bits):
                raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ –º–µ—Ç–æ–¥–∞")
            positions = rng.choice(safe, size=len(bits), replace=False)
            for i, bit_chr in enumerate(bits):
                if i % 2000 == 0:
                    update(100 * i / len(bits), "–°–∫—Ä—ã—Ç–∏–µ‚Ä¶")
                pos = positions[i]
                bit = int(bit_chr)
                val = flat[pos]
                lsb = val & 1
                if lsb != bit:
                    delta = rng.choice([-1, 1])
                    new = val + delta
                    new = np.clip(new, 0, 255)  # ‚Üê –∑–∞—â–∏—Ç–∞ –æ—Ç uint8-–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                    flat[pos] = new
            stego_array = flat.reshape(work.shape).astype(np.uint8)
            if img_array.shape[-1] == 4:
                stego_array = np.dstack([stego_array, img_array[:, :, 3]])
        if method == "aelsb":
            # -------- Adaptive-Edge-LSB --------
            if img_array.shape[-1] == 4:
                work = img_array[:, :, :3]
            else:
                work = img_array
            gray = cv2.cvtColor(work.astype(np.uint8), cv2.COLOR_RGB2GRAY)
            edges = cv2.Canny(gray, 50, 100)  # –ø–æ—Ä–æ–≥–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å
            safe_mask = (edges == 0)  # —Ç–æ–ª—å–∫–æ ¬´–≥–ª–∞–¥–∫–∏–µ¬ª –ø–∏–∫—Å–µ–ª–∏
            flat = work.reshape(-1)
            safe_idx = np.where(safe_mask.reshape(-1))[0]

            header = len(data).to_bytes(4, "big")
            payload = header + data
            bits_needed = len(payload) * 8
            if bits_needed > len(safe_idx):
                raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è AELSB")

            key = hashlib.sha256(password.encode()).digest()
            rng = np.random.default_rng(np.frombuffer(key, dtype=np.uint32))
            positions = rng.choice(safe_idx, size=bits_needed, replace=False)

            bitstream = ''.join(f"{b:08b}" for b in payload)
            for i, bit_chr in enumerate(bitstream):
                if i % 2000 == 0:
                    update(100 * i / len(bitstream), "–°–∫—Ä—ã—Ç–∏–µ (AELSB)...")
                pos = positions[i]
                bit = int(bit_chr)
                val = flat[pos] & ~1 | bit
                flat[pos] = np.clip(val, 0, 255)

            stego_array = flat.reshape(img_array.shape)
        else:
            # --- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π LSB (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
            if img_array.shape[-1] == 4:
                img_array = img_array[:, :, :3]
            flat = img_array.reshape(-1)
            header = len(data).to_bytes(4, "big")
            payload = header + data
            bits_needed = len(payload) * 8
            if bits_needed > len(flat):
                raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ")
            key = hashlib.sha256(password.encode()).digest()
            rng = np.random.default_rng(np.frombuffer(key, dtype=np.uint32))
            positions = rng.permutation(len(flat))[:bits_needed]
            bitstream = ''.join(f"{b:08b}" for b in payload)
            for i, bit_chr in enumerate(bitstream):
                if i % 2000 == 0:
                    update(100 * i / len(bitstream), "–°–∫—Ä—ã—Ç–∏–µ‚Ä¶")
                pos = positions[i]
                bit = int(bit_chr)
                val = flat[pos] & ~1 | bit
                flat[pos] = np.clip(val, 0, 255)  # ‚Üê –∑–∞—â–∏—Ç–∞
            stego_array = flat.reshape(img_array.shape)

        update(100, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        Image.fromarray(stego_array.astype(np.uint8)).save(output_path, "PNG", compress_level=compression_level)

    # ‚îÄ‚îÄ 2.  –ò–ó–í–õ–ï–ß–ï–ù–ò–ï -------------------------------------------------------
    @staticmethod
    def extract_data(image_path: str,
                     password: str,
                     method: str = "lsb",  # ‚Üê –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                     progress_callback: Optional[Callable[[float], None]] = None,
                     cancel_event: Optional[threading.Event] = None) -> bytes:
        def update(pct, msg):
            if progress_callback:
                progress_callback(pct)
            if cancel_event and cancel_event.is_set():
                raise Exception("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

        update(0, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        with Image.open(image_path) as img:
            if img.mode not in ("RGB", "RGBA"):
                img = img.convert("RGB")
            img_array = np.array(img, dtype=np.int16)  # ‚Üê int16

        # ---------- 1.  –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ ----------
        if method == "noise":
            # --- 1.1  Adaptive-Noise---
            key = hashlib.sha512(password.encode()).digest()
            rng = np.random.default_rng(np.frombuffer(key, dtype=np.uint64))
            work = img_array[:, :, :3].astype(np.int16)
            flat = work.reshape(-1)
            gray = cv2.cvtColor(img_array[:, :, :3], cv2.COLOR_RGB2GRAY)
            edges = cv2.Canny(gray, 40, 80).reshape(-1)
            safe = np.where(edges == 0)[0]
            # —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (4 –±–∞–π—Ç–∞ = 32 –±–∏—Ç–∞)
            positions = rng.choice(safe, size=32, replace=False)
            header_bits = [str(flat[p] & 1) for p in sorted(positions)]
            data_len = int(''.join(header_bits), 2)
            if data_len <= 0 or data_len > 50 * 1024 * 1024:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö")
            total_bits = 32 + data_len * 8
            positions = rng.choice(safe, size=total_bits, replace=False)
            data_bits = [str(flat[p] & 1) for p in sorted(positions)][32:]
            data = bytes(int(''.join(data_bits[i:i + 8]), 2)
                         for i in range(0, len(data_bits), 8))
        elif method == "aelsb":
            # -------- Adaptive-Edge-LSB extraction --------
            if img_array.shape[-1] == 4:
                work = img_array[:, :, :3]
            else:
                work = img_array
            gray = cv2.cvtColor(work.astype(np.uint8), cv2.COLOR_RGB2GRAY)
            edges = cv2.Canny(gray, 50, 100)
            safe_mask = (edges == 0)
            flat = work.reshape(-1)
            safe_idx = np.where(safe_mask.reshape(-1))[0]

            key = hashlib.sha256(password.encode()).digest()
            rng = np.random.default_rng(np.frombuffer(key, dtype=np.uint32))

            # —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            positions32 = rng.choice(safe_idx, size=32, replace=False)
            header_bits = [str(flat[p] & 1) for p in sorted(positions32)]
            data_len = int(''.join(header_bits), 2)
            if data_len <= 0 or data_len > 50 * 1024 * 1024:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö (AELSB)")

            total_bits = 32 + data_len * 8
            positions = rng.choice(safe_idx, size=total_bits, replace=False)
            data_bits = [str(flat[p] & 1) for p in sorted(positions)][32:]
            data = bytes(int(''.join(data_bits[i:i + 8]), 2)
                         for i in range(0, len(data_bits), 8))
        else:  # classic LSB
            # --- 1.2  –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π LSB ---
            if img_array.shape[-1] == 4:
                img_array = img_array[:, :, :3]
            flat = img_array.reshape(-1)
            key = hashlib.sha256(password.encode()).digest()
            rng = np.random.default_rng(np.frombuffer(key, dtype=np.uint32))
            positions = rng.permutation(len(flat))
            # header
            header_bits = [str(flat[p] & 1) for p in positions[:32]]
            data_len = int(''.join(header_bits), 2)
            if data_len <= 0 or data_len > 50 * 1024 * 1024:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö")
            total_bits = 32 + data_len * 8
            data_bits = [str(flat[p] & 1) for p in positions[32:total_bits]]
            data = bytes(int(''.join(data_bits[i:i + 8]), 2)
                         for i in range(0, len(data_bits), 8))

        update(100, "–ì–æ—Ç–æ–≤–æ")
        return data


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîê –ö–õ–ê–°–° –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class PasswordDialog:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.password_correct = False
        self.dialog = tk.Toplevel(root)
        self.dialog.title("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        self.dialog.geometry("350x300")  # –£–º–µ–Ω—å—à–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞
        self.dialog.resizable(False, False)
        self.dialog.protocol("WM_DELETE_WINDOW", self._on_close)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.dialog.withdraw()
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() - self.dialog.winfo_reqwidth()) // 2
        y = (self.dialog.winfo_screenheight() - self.dialog.winfo_reqheight()) // 2
        self.dialog.geometry(f"+{x}+{y}")
        self.dialog.deiconify()

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.theme_manager = ThemeManager(self.dialog)
        self.theme_manager.set_theme("–¢—ë–º–Ω–∞—è")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.colors = self.theme_manager.colors

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.dialog, text="üîê –î–æ—Å—Ç—É–ø –∫ √òccultoNG", font=("Segoe UI", 14, "bold"),
                                style="GroupHeader.TLabel")
        title_label.pack(pady=(20, 10))

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ttk.Label(self.dialog, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", style="Secondary.TLabel")
        subtitle_label.pack(pady=(0, 15))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        self.password_var = tk.StringVar()
        self.entry = ttk.Entry(self.dialog, textvariable=self.password_var, show="*", width=30, font=("Segoe UI", 11))
        self.entry.pack(pady=5, padx=20, fill=tk.X)
        self.entry.bind("<Return>", lambda e: self.check_password())

        # –£–¥–∞–ª–µ–Ω —á–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫
        self.error_label = ttk.Label(self.dialog, text="", style="Error.TLabel")
        self.error_label.pack()

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(self.dialog)
        btn_frame.pack(pady=15)
        ttk.Button(btn_frame, text="–í–æ–π—Ç–∏", command=self.check_password, style="Accent.TButton").pack(side=tk.LEFT,
                                                                                                      padx=5)
        ttk.Button(btn_frame, text="–í—ã—Ö–æ–¥", command=self._on_close, style="TButton").pack(side=tk.LEFT, padx=5)

        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.entry.focus_set()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.dialog.transient(root)
        self.dialog.grab_set()
        root.wait_window(self.dialog)

    def check_password(self) -> None:
        entered = self.password_var.get()
        if not entered:
            self.error_label.config(text="–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        hash_obj = hashlib.sha256(entered.encode('utf-8'))
        if hash_obj.hexdigest() == PASSWORD_HASH:
            self.password_correct = True
            self.dialog.destroy()
        else:
            self.error_label.config(text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    def _on_close(self) -> None:
        self.password_correct = False
        self.dialog.destroy()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß† –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class SteganographyUltimate:
    def __init__(self):
        # –°–æ–∑–¥–∞—ë–º DnD-–æ–∫–Ω–æ
        self.root = TkinterDnD.Tk()
        self.root.title(f"√òccultoNG v{VERSION}")
        self.root.geometry("1000x800")
        self.root.minsize(800, 600)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        password_dialog = PasswordDialog(self.root)
        if not password_dialog.password_correct:
            self.root.destroy()
            return

        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            self.root.iconbitmap(default=self.resource_path("icon.ico"))
        except:
            pass

        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
        self.theme_manager = ThemeManager(self.root)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.load_settings()
        self.history = self.load_history()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.theme_manager.set_theme(self.settings.get("theme", "–¢—ë–º–Ω–∞—è"))
        self.colors = self.theme_manager.colors

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.img_path = tk.StringVar()
        self.extract_img_path = tk.StringVar()
        self.data_type = tk.StringVar(value=self.settings.get("data_type", "text"))
        self.method_var = tk.StringVar(value=self.settings.get("method", "lsb"))
        self.compression_level = tk.IntVar(value=self.settings.get("compression_level", 9))
        self.current_extracted = None
        self.is_dragging = False
        self.last_update_time = 0
        self.file_path_var = tk.StringVar()

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.preview_img = None
        self.extract_preview = None
        self.text_input = None
        self.result_text = None
        self.progress_var = None
        self.progress_bar = None
        self.status_label = None
        self.history_labels = []
        self.size_info = None

        # –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        self.cancel_event = threading.Event()
        self.operation_thread = None

        # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.temp_extracted_file = None

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π
        self.buttons_disabled = False

        # Toast
        self.toast_label = None
        self.toast_timer = None
        self._preview_photo = None  # –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–°–∫—Ä—ã—Ç—å"
        self._extract_photo = None  # –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ò–∑–≤–ª–µ—á—å"
        # –ó–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ False)
        self.remember_password = False  # password_dialog.remember_var.get()

        self.setup_ui()
        self.bind_drag_drop()
        self.refresh_history()

    def resource_path(self, relative_path: str) -> str:
        """ –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É """
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)

    def load_settings(self) -> dict:
        try:
            if os.path.exists(CONFIG["SETTINGS_FILE"]):
                with open(CONFIG["SETTINGS_FILE"], 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            "theme": "–¢—ë–º–Ω–∞—è",
            "method": "lsb",
            "data_type": "text",
            "compression_level": 9,
            "window_size": "1000x800"
        }

    def save_settings(self) -> None:
        settings = {
            "theme": self.theme_manager.current_theme,
            "method": self.method_var.get(),
            "data_type": self.data_type.get(),
            "compression_level": self.compression_level.get(),
            "window_size": self.root.geometry()
        }
        try:
            with open(CONFIG["SETTINGS_FILE"], 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def load_history(self) -> list:
        try:
            if os.path.exists(CONFIG["HISTORY_FILE"]):
                with open(CONFIG["HISTORY_FILE"], 'r', encoding='utf-8') as f:
                    history = json.load(f)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                    valid_history = [h for h in history if os.path.exists(h)]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    if len(valid_history) != len(history):
                        self.save_history(valid_history)
                    return valid_history[:MAX_HISTORY]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

    def save_history(self, history: list) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(CONFIG["HISTORY_FILE"], 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def save_to_history(self, path: str) -> None:
        if not path:
            return
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        hist = [path] + [h for h in self.history if h != path and os.path.exists(h)]
        self.history = hist[:MAX_HISTORY]
        self.save_history(self.history)

    def setup_ui(self) -> None:
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, style="Card.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ–Ω—é
        self.create_header(main_frame)

        # –í–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))

        self.create_hide_tab()
        self.create_extract_tab()
        self.create_settings_tab()

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar(main_frame)

        # Toast
        self.create_toast()

    def create_header(self, parent: ttk.Frame) -> None:
        header_frame = ttk.Frame(parent, style="Card.TFrame")
        header_frame.pack(fill=tk.X, pady=(0, 15))

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_frame = ttk.Frame(header_frame, style="Card.TFrame")
        title_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        title = ttk.Label(
            title_frame,
            text="√òccultoNG",
            font=("Segoe UI Variable Display", 22, "bold"),
            foreground=self.colors["accent"]
        )
        title.pack(side=tk.LEFT)

        version_label = ttk.Label(
            title_frame,
            text=f"v{VERSION}",
            font=("Segoe UI", 11),
            foreground=self.colors["text_secondary"]
        )
        version_label.pack(side=tk.LEFT, padx=(8, 0), pady=(5, 0))

        # –ú–µ–Ω—é
        menu_frame = ttk.Frame(header_frame, style="Card.TFrame")
        menu_frame.pack(side=tk.RIGHT)

        help_btn = ttk.Button(
            menu_frame,
            text="–ü–æ–º–æ—â—å",
            command=self.show_help,
            style="IconButton.TButton"
        )
        help_btn.pack(side=tk.LEFT, padx=5)

    def create_hide_tab(self) -> None:
        frame = ttk.Frame(self.notebook, style="Card.TFrame")
        self.notebook.add(frame, text="–°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        container = ttk.LabelFrame(
            frame,
            text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
            padding=15,
            style="Card.TLabelframe"
        )
        container.pack(fill=tk.X, pady=(0, 15))

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        path_frame = ttk.Frame(container, style="Card.TFrame")
        path_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(path_frame, text="–ü—É—Ç—å:", style="TLabel").pack(side=tk.LEFT)

        path_entry = ttk.Entry(
            path_frame,
            textvariable=self.img_path,
            state='readonly',
            width=50,
            style="TEntry"
        )
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        browse_btn = ttk.Button(
            path_frame,
            text="–û–±–∑–æ—Ä...",
            command=self.select_image,
            style="IconButton.TButton"
        )
        browse_btn.pack(side=tk.LEFT)

        # –ó–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        drop_frame = ttk.Frame(container, style="DropZone.TFrame")
        drop_frame.pack(fill=tk.X, pady=10)

        self.drop_label = ttk.Label(
            drop_frame,
            text="üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
            anchor="center",
            font=("Segoe UI", 11),
            cursor="hand2",
            style="Secondary.TLabel"
        )
        self.drop_label.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        self.drop_label.bind("<Button-1>", lambda e: self.select_image())
        # ----- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -----
        self.preview_img = ttk.Label(container)
        self.preview_img.pack(pady=5)

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        data_group = ttk.LabelFrame(
            frame,
            text="–°–∫—Ä—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ",
            padding=15,
            style="Card.TLabelframe"
        )
        data_group.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        type_frame = ttk.Frame(data_group, style="Card.TFrame")
        type_frame.pack(fill=tk.X, pady=(0, 15))

        ttk.Label(type_frame, text="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", style="TLabel").pack(side=tk.LEFT, padx=(0, 10))

        ttk.Radiobutton(
            type_frame,
            text="–¢–µ–∫—Å—Ç",
            variable=self.data_type,
            value="text",
            command=self.toggle_data_input,
            style="TRadiobutton"
        ).pack(side=tk.LEFT, padx=(0, 20))

        ttk.Radiobutton(
            type_frame,
            text="–§–∞–π–ª",
            variable=self.data_type,
            value="file",
            command=self.toggle_data_input,
            style="TRadiobutton"
        ).pack(side=tk.LEFT)

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        self.text_frame = ttk.Frame(data_group, style="Card.TFrame")
        self.text_frame.pack(fill=tk.BOTH, expand=True)

        self.text_input = scrolledtext.ScrolledText(
            self.text_frame,
            height=10,
            font=("Consolas", 10),
            wrap=tk.WORD,
            bg=self.colors["card"],
            fg=self.colors["text"],
            insertbackground=self.colors["fg"],
            selectbackground=self.colors["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=1
        )
        self.text_input.pack(fill=tk.BOTH, expand=True)

        # –§–∞–π–ª–æ–≤—ã–π –≤–≤–æ–¥
        self.file_frame = ttk.Frame(data_group, style="Card.TFrame")

        file_input_frame = ttk.Frame(self.file_frame, style="Card.TFrame")
        file_input_frame.pack(fill=tk.X, pady=(10, 0))

        ttk.Label(file_input_frame, text="–§–∞–π–ª:", style="TLabel").pack(side=tk.LEFT)

        file_entry = ttk.Entry(
            file_input_frame,
            textvariable=self.file_path_var,
            state='readonly',
            width=40,
            style="TEntry"
        )
        file_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(
            file_input_frame,
            text="–í—ã–±—Ä–∞—Ç—å...",
            command=self.select_file,
            style="IconButton.TButton"
        ).pack(side=tk.LEFT)

        options_frame = ttk.Frame(frame, style="Card.TFrame")
        options_frame.pack(fill=tk.X, pady=(0, 15))

        # –ú–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è
        method_frame = ttk.Frame(options_frame, style="Card.TFrame")
        method_frame.pack(side=tk.LEFT)

        ttk.Label(method_frame, text="–ú–µ—Ç–æ–¥:", style="TLabel").pack(side=tk.LEFT)

        method_combo = ttk.Combobox(
            method_frame,
            textvariable=self.method_var,
            values=list(STEGANO_METHODS.keys()),
            state="readonly",
            width=20,
            style="TCombobox"
        )
        method_combo.pack(side=tk.LEFT, padx=5)

        # –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è PNG
        compression_frame = ttk.Frame(options_frame, style="Card.TFrame")
        compression_frame.pack(side=tk.LEFT, padx=(20, 0))

        ttk.Label(compression_frame, text="–°–∂–∞—Ç–∏–µ PNG:", style="TLabel").pack(side=tk.LEFT, padx=(10, 0))

        compression_combo = ttk.Combobox(
            compression_frame,
            textvariable=self.compression_level,
            values=list(range(0, 10)),
            state="readonly",
            width=5,
            style="TCombobox"
        )
        compression_combo.pack(side=tk.LEFT, padx=5)

        # üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
        self.size_info = ttk.Label(
            frame,
            text="",
            font=("Segoe UI", 10),
            foreground=self.colors["text_secondary"]
        )
        self.size_info.pack(pady=(15, 5))  # üëà –ø–æ–¥–Ω—è–ª–∏ –≤—ã—à–µ

        # üìå –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∏—è ‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–¥ —à–∫–∞–ª–æ–π
        self.hide_button = ttk.Button(
            frame,
            text="üîê –°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ",
            style="Accent.TButton",
            command=self.start_hide
        )
        self.hide_button.pack(pady=(5, 15))

    def create_extract_tab(self) -> None:
        frame = ttk.Frame(self.notebook, style="Card.TFrame")
        self.notebook.add(frame, text="–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        container = ttk.LabelFrame(
            frame,
            text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏",
            padding=15,
            style="Card.TLabelframe"
        )
        container.pack(fill=tk.X, pady=(0, 15))

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        path_frame = ttk.Frame(container, style="Card.TFrame")
        path_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(path_frame, text="–ü—É—Ç—å:", style="TLabel").pack(side=tk.LEFT)

        path_entry = ttk.Entry(
            path_frame,
            textvariable=self.extract_img_path,
            state='readonly',
            width=50,
            style="TEntry"
        )
        path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        browse_btn = ttk.Button(
            path_frame,
            text="–û–±–∑–æ—Ä...",
            command=self.select_extract_image,
            style="IconButton.TButton"
        )
        browse_btn.pack(side=tk.LEFT)

        # ----- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -----
        self.extract_preview = ttk.Label(container)
        self.extract_preview.pack(pady=5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        result_group = ttk.LabelFrame(
            frame,
            text="–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            padding=15,
            style="Card.TLabelframe"
        )
        result_group.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        self.result_text = scrolledtext.ScrolledText(
            result_group,
            height=12,
            font=("Consolas", 10),
            wrap=tk.WORD,
            state='disabled',
            bg=self.colors["card"],
            fg=self.colors["text"],
            insertbackground=self.colors["fg"],
            selectbackground=self.colors["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=1
        )
        self.result_text.pack(fill=tk.BOTH, expand=True)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(frame, style="Card.TFrame")
        btn_frame.pack(pady=(10, 0))

        self.extract_button = ttk.Button(
            btn_frame,
            text="üîç –ò–∑–≤–ª–µ—á—å",
            style="Action.TButton",
            command=self.start_extract
        )
        self.extract_button.pack(side=tk.LEFT, padx=5)

        self.save_button = ttk.Button(
            btn_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            style="Action.TButton",
            command=self.save_extracted
        )
        self.save_button.pack(side=tk.LEFT, padx=5)

        self.copy_button = ttk.Button(
            btn_frame,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            style="Action.TButton",
            command=self.copy_extracted
        )
        self.copy_button.pack(side=tk.LEFT, padx=5)

        # –ò—Å—Ç–æ—Ä–∏—è
        hist_frame = ttk.LabelFrame(
            frame,
            text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã",
            padding=10,
            style="Card.TLabelframe"
        )
        hist_frame.pack(fill=tk.X, pady=(15, 0))

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.history_labels = []
        for i in range(MAX_HISTORY):
            lbl = ttk.Label(
                hist_frame,
                text="",
                style="History.TLabel",
                cursor="hand2"
            )
            lbl.pack(anchor="w", pady=2)
            self.history_labels.append(lbl)

    def create_settings_tab(self) -> None:
        frame = ttk.Frame(self.notebook, style="Card.TFrame")
        self.notebook.add(frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ì—Ä—É–ø–ø–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        appearance_group = ttk.LabelFrame(
            frame,
            text="–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
            padding=15,
            style="Card.TLabelframe"
        )
        appearance_group.pack(fill=tk.X, pady=(0, 15))

        ttk.Label(
            appearance_group,
            text="–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        theme_var = tk.StringVar(value=self.theme_manager.current_theme)
        theme_combo = ttk.Combobox(
            appearance_group,
            textvariable=theme_var,
            values=list(THEMES.keys()),
            state="readonly",
            style="TCombobox"
        )
        theme_combo.pack(fill=tk.X, pady=(0, 10))
        theme_combo.bind("<<ComboboxSelected>>", lambda e: self.change_theme(theme_var.get()))

        # –ì—Ä—É–ø–ø–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_group = ttk.LabelFrame(
            frame,
            text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã",
            padding=15,
            style="Card.TLabelframe"
        )
        params_group.pack(fill=tk.X, pady=(0, 15))

        # –ú–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            params_group,
            text="–ú–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        method_combo = ttk.Combobox(
            params_group,
            textvariable=self.method_var,
            values=list(STEGANO_METHODS.keys()),
            state="readonly",
            style="TCombobox"
        )
        method_combo.pack(fill=tk.X, pady=(0, 10))

        # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            params_group,
            text="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        data_type_combo = ttk.Combobox(
            params_group,
            textvariable=self.data_type,
            values=["text", "file"],
            state="readonly",
            style="TCombobox"
        )
        data_type_combo.pack(fill=tk.X, pady=(0, 10))

        # –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è PNG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            params_group,
            text="–°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è PNG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Segoe UI", 11),
            style="TLabel"
        ).pack(anchor="w", pady=(0, 5))

        compression_combo = ttk.Combobox(
            params_group,
            textvariable=self.compression_level,
            values=list(range(0, 10)),
            state="readonly",
            style="TCombobox"
        )
        compression_combo.pack(fill=tk.X, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(frame, style="Card.TFrame")
        btn_frame.pack(pady=20)

        self.save_settings_button = ttk.Button(
            btn_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            style="Accent.TButton",
            command=self.save_settings_ui
        )
        self.save_settings_button.pack(side=tk.LEFT, padx=10)

        self.reset_settings_button = ttk.Button(
            btn_frame,
            text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            style="TButton",
            command=self.reset_settings
        )
        self.reset_settings_button.pack(side=tk.LEFT, padx=10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        info_group = ttk.LabelFrame(
            frame,
            text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            padding=15,
            style="Card.TLabelframe"
        )
        info_group.pack(fill=tk.X, pady=(15, 0))

        info_text = f"""\
        √òccultoNG v{VERSION}  ‚Ä¢  Made with üñ§ by {AUTHOR}

        –°–æ—Å—Ç–∞–≤ ¬´–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–µ–ª—å—è¬ª:
        ‚Ä¢ Python 3.10+ ‚Äì –º–æ–∑–≥ –∏ –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞  
        ‚Ä¢ Pillow ‚Äì –≥–ª–∞–∑–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏  
        ‚Ä¢ OpenCV ‚Äì –∞–Ω–∞–ª–∏—Ç–∏–∫, –∏—â—É—â–∏–π ¬´—Ç–∏—Ö–∏–µ¬ª –ø–∏–∫—Å–µ–ª–∏  
        ‚Ä¢ NumPy ‚Äì —Å–∫–æ—Ä–æ—Å—Ç—å, –º–∏–ª–ª–∏–æ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ  
        ‚Ä¢ Tkinter + tkdnd2 ‚Äì –ª–∏—Ü–æ –∏ —Ä—É–∫–∏, —É–¥–æ–±–Ω—ã–π drag-and-drop  

        –õ–∏—Ü–µ–Ω–∑–∏—è: MIT ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π, –¥–µ–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω–æ.
        """
        info_label = ttk.Label(
            info_group,
            text=info_text,
            justify=tk.LEFT,
            font=("Segoe UI", 9),
            style="Secondary.TLabel"
        )
        info_label.pack(anchor="w")

    def create_status_bar(self, parent: ttk.Frame) -> None:
        status_frame = ttk.Frame(parent, style="StatusBar.TFrame")
        status_frame.pack(fill=tk.X, pady=(10, 0))

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            mode="determinate",
            style="TProgressbar"
        )
        self.progress_bar.pack(fill=tk.X, side=tk.LEFT, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        self.cancel_button = ttk.Button(
            status_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.cancel_operation,
            style="TButton"
        )
        self.cancel_button.pack(side=tk.RIGHT, padx=(10, 0))

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            status_frame,
            text="–ì–æ—Ç–æ–≤",
            font=("Segoe UI", 9),
            foreground=self.colors["text_secondary"],
            style="Secondary.TLabel"
        )
        self.status_label.pack(side=tk.RIGHT, padx=(10, 0))

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        self.progress_bar.pack_forget()
        self.cancel_button.pack_forget()

    def create_toast(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.toast_label = tk.Label(
            self.root,
            text="",
            font=("Segoe UI", 10, "bold"),
            padx=15,
            pady=8,
            relief="solid",
            bd=0,
            bg=self.colors.get("shadow", "#333333"),
            fg=self.colors.get("text", "#ffffff"),
            highlightthickness=1,
            highlightcolor=self.colors.get("accent", "#58A6FF")
        )
        self.toast_label.place_forget()

    def show_toast(self, message: str, duration: int = 2000) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.toast_timer:
            self.root.after_cancel(self.toast_timer)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.toast_label.config(text=message)
        self.toast_label.place(relx=0.5, rely=0.9, anchor="center")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ duration –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        self.toast_timer = self.root.after(duration, self.hide_toast)

    def hide_toast(self) -> None:
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.toast_label.place_forget()
        self.toast_timer = None

    def animate_drop(self) -> None:
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        original_text = self.drop_label.cget("text")
        self.drop_label.config(text="‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!", foreground=self.colors["success"])
        self.root.after(1500,
                        lambda: self.drop_label.config(text=original_text, foreground=self.colors["text_secondary"]))

    def bind_drag_drop(self) -> None:
        self.drop_label.drop_target_register(DND_FILES)
        self.drop_label.dnd_bind('<<Drop>>', self.on_drop_image)

    def on_drop_image(self, event: tk.Event) -> None:
        path = event.data.strip('{}')
        if os.path.isfile(path) and Utils.is_image_file(path):
            self.img_path.set(path)
            self.update_size_info()
            self.animate_drop()
            self.show_toast("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.update_thumbnail(path, self.preview_img)

        else:
            messagebox.showwarning(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: PNG, BMP, TIFF, TGA, JPG, JPEG"
            )

    def show_image_preview(self, image_path: str) -> None:
        """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."""
        if not os.path.exists(image_path):
            return

        preview_win = tk.Toplevel(self.root)
        preview_win.title(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ‚Äì {os.path.basename(image_path)}")
        preview_win.geometry("600x600")
        preview_win.resizable(True, True)
        preview_win.transient(self.root)
        preview_win.grab_set()
        preview_win.focus_set()
        preview_win.bind("<Escape>", lambda e: preview_win.destroy())

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        with Image.open(image_path) as img:
            img.thumbnail((550, 550), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(img)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        frame = ttk.Frame(preview_win, style="Card.TFrame")
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ú–µ—Ç–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        lbl = ttk.Label(frame, image=photo, style="Card.TFrame")
        lbl.image = photo  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
        lbl.pack(fill=tk.BOTH, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=preview_win.destroy)
        close_btn.pack(pady=10)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() - preview_win.winfo_reqwidth()) // 2
        y = (self.root.winfo_screenheight() - preview_win.winfo_reqheight()) // 2
        preview_win.geometry(f"+{x}+{y}")

    def select_image(self) -> None:
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
            filetypes=SUPPORTED_FORMATS
        )
        if path:
            self.img_path.set(path)
            self.update_size_info()
            self.update_thumbnail(path, self.preview_img)

    def select_extract_image(self) -> None:
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏",
            filetypes=SUPPORTED_FORMATS
        )
        if path:
            self.extract_img_path.set(path)
            self.update_thumbnail(path, self.extract_preview)

    def select_file(self) -> None:
        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è")
        if path:
            file_size = os.path.getsize(path) / (1024 * 1024)  # MB
            if file_size > CONFIG["MAX_FILE_SIZE_MB"]:
                messagebox.showwarning(
                    "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {CONFIG['MAX_FILE_SIZE_MB']} –ú–ë"
                )
                return
            self.file_path_var.set(path)
            self.update_size_info()

    def toggle_data_input(self) -> None:
        if self.data_type.get() == "text":
            self.file_frame.pack_forget()
            self.text_frame.pack(fill=tk.BOTH, expand=True)
        else:
            self.text_frame.pack_forget()
            self.file_frame.pack(fill=tk.X, pady=(10, 0))
        self.update_size_info()

    def update_size_info(self) -> None:
        current_time = time.time()
        if current_time - self.last_update_time < 0.5:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            return
        self.last_update_time = current_time

        try:
            img_path = self.img_path.get()
            if not img_path or not os.path.exists(img_path):
                self.size_info.config(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", style="Error.TLabel")
                return

            w, h, total_bits = ImageProcessor.get_image_info(img_path)
            used_bits = HEADER_SIZE_BITS  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

            if self.data_type.get() == "text":
                text = self.text_input.get("1.0", tk.END).strip()
                if not text:
                    self.size_info.config(text="–¢–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥—ë–Ω", style="Error.TLabel")
                    return
                raw_data = text.encode('utf-8')
            else:
                file_path = self.file_path_var.get()
                if not os.path.exists(file_path):
                    self.size_info.config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", style="Error.TLabel")
                    return
                with open(file_path, 'rb') as f:
                    raw_data = f.read()

            # –£—á—ë—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å)
            encrypted = raw_data
            used_bits += len(encrypted) * 8

            usage = (used_bits / total_bits) * 100

            if usage < 70:
                style = "Success.TLabel"
            elif usage < 90:
                style = "Warning.TLabel"
            else:
                style = "Error.TLabel"

            self.size_info.config(
                text=f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {w}x{h} | –î–æ—Å—Ç—É–ø–Ω–æ: {Utils.format_size(total_bits / 8)} | " +
                     f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {Utils.format_size(used_bits / 8)} ({usage:.1f}%)",
                style=style
            )

        except Exception as e:
            self.size_info.config(text=f"–û—à–∏–±–∫–∞: {str(e)}", style="Error.TLabel")

    def update_thumbnail(self, path: str, target_label: tk.Widget) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É 200√ó200 –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ."""
        try:
            with Image.open(path) as img:
                img.thumbnail((200, 200), Image.Resampling.LANCZOS)
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background
                tk_img = ImageTk.PhotoImage(img)
                target_label.configure(image=tk_img)
                target_label.image = tk_img  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
        except Exception as e:
            target_label.configure(image='', text=f'–û—à–∏–±–∫–∞: {e}')

    def validate_before_hide(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
        img_path = self.img_path.get()
        if not img_path or not os.path.exists(img_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            w, h, total_bits = ImageProcessor.get_image_info(img_path)
            if w < 100 or h < 100:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                       "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –º–µ–Ω–µ–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if self.data_type.get() == "text":
            text = self.text_input.get("1.0", tk.END).strip()
            if not text:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤–≤–µ–¥—ë–Ω")
                return False
        else:
            file_path = self.file_path_var.get()
            if not file_path or not os.path.exists(file_path):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

        return True

    def start_hide(self) -> None:
        if self.buttons_disabled:
            return
        if not self.validate_before_hide():
            return
        self.operation_thread = threading.Thread(target=self.hide_data, daemon=True)
        self.operation_thread.start()

    def hide_data(self) -> None:
        try:
            self.set_progress_mode(True, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.toggle_buttons(False)
            self.cancel_event.clear()

            img_path = self.img_path.get()
            if not img_path or not os.path.exists(img_path):
                raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if self.data_type.get() == "text":
                text = self.text_input.get("1.0", tk.END).strip()
                if not text:
                    raise ValueError("–¢–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤–≤–µ–¥—ë–Ω")
                data = text.encode('utf-8')
            else:
                file_path = self.file_path_var.get()
                if not file_path or not os.path.exists(file_path):
                    raise ValueError("–§–∞–π–ª –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                with open(file_path, 'rb') as f:
                    data = f.read()

            # –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏",
                defaultextension=".png",
                filetypes=[("PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png")]
            )
            if not output:
                self.set_progress_mode(False)
                self.toggle_buttons(True)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            required_space_mb = os.path.getsize(img_path) / (1024 * 1024) * 1.1
            free_space_mb = Utils.get_free_space_mb(os.path.dirname(output) or '.')

            if free_space_mb < required_space_mb:
                raise ValueError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: {Utils.format_size(required_space_mb * 1024 * 1024)}, –î–æ—Å—Ç—É–ø–Ω–æ: {Utils.format_size(free_space_mb * 1024 * 1024)}")

            # –°–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
            start_time = time.time()

            def progress_callback(progress: float) -> None:
                if self.cancel_event.is_set():
                    raise Exception("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                elapsed_time = time.time() - start_time
                speed = progress / 100 * len(data) / elapsed_time if elapsed_time > 0 else 0
                self.root.after(0, lambda: self.progress_var.set(progress))
                self.root.after(0, lambda: self.status_label.config(
                    text=f"–°–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö... {progress:.1f}% | {Utils.format_size(speed)}/s"
                ))

            ImageProcessor.hide_data(
                img_path,
                data,
                "",  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                output,
                compression_level=self.compression_level.get(),
                progress_callback=progress_callback,
                cancel_event=self.cancel_event
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(output)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.root.after(0, lambda: messagebox.showinfo(
                "–£—Å–ø–µ—Ö",
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output}"
            ))

        except Exception as e:
            if str(e) == "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º":
                self.root.after(0, lambda: messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–û–ø–µ—Ä–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."))
            else:
                error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}"
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è
                if "too small" in str(e).lower() or "—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–ª—è –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö.\n- –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö."
                elif "not enough space" in str(e).lower() or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                elif "file not found" in str(e).lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_msg))
        finally:
            self.set_progress_mode(False)
            self.toggle_buttons(True)

    def start_extract(self) -> None:
        if self.buttons_disabled:
            return
        self.operation_thread = threading.Thread(target=self.extract_data, daemon=True)
        self.operation_thread.start()

    def extract_data(self) -> None:
        try:
            self.set_progress_mode(True, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é...")
            self.toggle_buttons(False)
            self.cancel_event.clear()
            path = self.extract_img_path.get()
            if not path or not os.path.exists(path):
                raise ValueError("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            start_time = time.time()

            def progress_callback(progress: float) -> None:
                if self.cancel_event.is_set():
                    raise Exception("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                elapsed_time = time.time() - start_time
                # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –∑–Ω–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–∞–Ω–µ–µ
                self.root.after(0, lambda: self.progress_var.set(progress))
                self.root.after(0, lambda: self.status_label.config(
                    text=f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... {progress:.1f}% | {elapsed_time:.1f}s"
                ))

            extracted = ImageProcessor.extract_data(
                path,
                "",  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                progress_callback,
                cancel_event=self.cancel_event
            )
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            try:
                text = extracted.decode('utf-8')
                self.current_extracted = ('text', text)
                self.root.after(0, lambda: self.result_text.config(state='normal'))
                self.root.after(0, lambda: self.result_text.delete("1.0", tk.END))
                self.root.after(0, lambda: self.result_text.insert("1.0", text))
                self.root.after(0, lambda: self.result_text.config(state='disabled'))
            except UnicodeDecodeError:
                # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                    tmp_file.write(extracted)
                    tmp_file_path = tmp_file.name
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                mime_type, encoding = mimetypes.guess_type(tmp_file_path)
                if mime_type:
                    ext = mimetypes.guess_extension(mime_type)
                    if ext:
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                        new_name = tmp_file_path + ext
                        os.rename(tmp_file_path, new_name)
                        tmp_file_path = new_name
                self.current_extracted = ('binary', tmp_file_path)
                self.root.after(0, lambda: self.result_text.config(state='normal'))
                self.root.after(0, lambda: self.result_text.delete("1.0", tk.END))
                self.root.after(0, lambda: self.result_text.insert(
                    "1.0",
                    f"–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(extracted)} –±–∞–π—Ç\n" +
                    f"–•–µ—à SHA-256: {hashlib.sha256(extracted).hexdigest()}\n" +
                    f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {tmp_file_path}"
                ))
                self.root.after(0, lambda: self.result_text.config(state='disabled'))
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(path)
        except Exception as e:
            if str(e) == "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º":
                self.root.after(0, lambda: messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."))
            else:
                error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}"
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è
                if "incorrect data length" in str(e).lower() or "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –í –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è).\n- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.\n- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–æ–º."
                elif "file not found" in str(e).lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(e).lower():
                    error_msg += "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω."
                    error_msg += "\n–†–µ—à–µ–Ω–∏—è:\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_msg))
        finally:
            self.set_progress_mode(False)
            self.toggle_buttons(True)

    def save_extracted(self) -> None:
        if not self.current_extracted:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
        data_type, content = self.current_extracted
        if data_type == 'text':
            path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            if path:
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {path}")
        else:
            # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞
            mime_type, encoding = mimetypes.guess_type(content)
            default_ext = ".bin"
            filetypes = [("–ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã", "*.bin"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            if mime_type:
                ext = mimetypes.guess_extension(mime_type)
                if ext:
                    default_ext = ext
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
                    desc = mime_type.split('/')[0].capitalize() + " —Ñ–∞–π–ª—ã"
                    filetypes.insert(0, (desc, f"*{ext}"))

            path = filedialog.asksaveasfilename(
                defaultextension=default_ext,
                filetypes=filetypes
            )
            if path:
                shutil.copy(content, path)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {path}")

    def copy_extracted(self) -> None:
        if not self.current_extracted:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        data_type, content = self.current_extracted
        if data_type == 'text':
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            self.status_label.config(text="–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä")

    def set_progress_mode(self, active: bool, message: str = None) -> None:
        if active:
            self.progress_bar.pack(fill=tk.X, side=tk.LEFT, expand=True)
            self.cancel_button.pack(side=tk.RIGHT, padx=(10, 0))
            self.progress_var.set(0)
            if message:
                self.status_label.config(text=message)
        else:
            self.progress_bar.pack_forget()
            self.cancel_button.pack_forget()
            self.progress_var.set(0)
            self.status_label.config(text="–ì–æ—Ç–æ–≤")

    def toggle_buttons(self, enable: bool) -> None:
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.buttons_disabled = not enable
        state = "normal" if enable else "disabled"
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Å–∫—Ä—ã—Ç–∏—è
        self.hide_button.config(state=state)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.extract_button.config(state=state)
        self.save_button.config(state=state)
        self.copy_button.config(state=state)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.save_settings_button.config(state=state)
        self.reset_settings_button.config(state=state)

    def cancel_operation(self) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        self.cancel_event.set()
        self.status_label.config(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...")

    def refresh_history(self) -> None:
        for i, lbl in enumerate(self.history_labels):
            if i < len(self.history):
                lbl.config(
                    text=f"{i + 1}. {Utils.truncate_path(self.history[i])}",
                    style="History.TLabel"
                )
                lbl.bind("<Button-1>", lambda e, idx=i: self.load_from_history(idx))
            else:
                lbl.config(text="", cursor="")

    def load_from_history(self, idx: int) -> None:
        if idx < len(self.history):
            path = self.history[idx]
            if os.path.exists(path):
                self.extract_img_path.set(path)
            else:
                messagebox.showwarning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "–§–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω.")
                del self.history[idx]
                self.refresh_history()

    def change_theme(self, theme_name: str) -> None:
        self.theme_manager.set_theme(theme_name)
        self.colors = self.theme_manager.colors
        self.refresh_history()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–∫–∞—Ö
        if hasattr(self, 'size_info'):
            self.size_info.config(foreground=self.colors["text_secondary"])
        if hasattr(self, 'status_label'):
            self.status_label.config(foreground=self.colors["text_secondary"])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        self.check_theme_contrast()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ç–∏–ª—è–º–∏ ttk
        if self.text_input:
            self.text_input.config(
                bg=self.colors["card"],
                fg=self.colors["text"],
                insertbackground=self.colors["fg"],
                selectbackground=self.colors["accent"],
                selectforeground="#ffffff"
            )
        if self.result_text:
            self.result_text.config(
                bg=self.colors["card"],
                fg=self.colors["text"],
                insertbackground=self.colors["fg"],
                selectbackground=self.colors["accent"],
                selectforeground="#ffffff"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.toast_label:
            self.toast_label.config(
                bg=self.colors.get("shadow", "#333333"),
                fg=self.colors.get("text", "#ffffff"),
                highlightcolor=self.colors.get("accent", "#58A6FF")
            )

    def check_theme_contrast(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–º—ã –ø–æ WCAG"""
        c = self.colors
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ–Ω–æ–º
        contrast_ratio = Utils.get_contrast_ratio(c["fg"], c["bg"])
        if contrast_ratio < 4.5:  # WCAG AA standard
            print(
                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∑–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞ –≤ —Ç–µ–º–µ '{self.theme_manager.current_theme}'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–µ –º–µ–Ω–µ–µ 4.5:1 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

    def save_settings_ui(self) -> None:
        self.save_settings()
        messagebox.showinfo(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n" +
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
        )

    def reset_settings(self) -> None:
        if messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"
        ):
            try:
                if os.path.exists(CONFIG["SETTINGS_FILE"]):
                    os.remove(CONFIG["SETTINGS_FILE"])
                if os.path.exists(CONFIG["HISTORY_FILE"]):
                    os.remove(CONFIG["HISTORY_FILE"])
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if hasattr(self, 'temp_extracted_file') and self.temp_extracted_file and os.path.exists(
                        self.temp_extracted_file.name):
                    os.unlink(self.temp_extracted_file.name)

                messagebox.showinfo(
                    "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞."
                )
                self.root.destroy()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def show_help(self) -> None:
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # üÜï –û–ë–ù–û–í–õ–Å–ù–ù–û–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # 1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –≤ –º–µ—Ç–æ–¥ show_help() –∫–ª–∞—Å—Å–∞ SteganographyUltimate
        # 2. –ó–∞–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é help_text = f""" ‚Ä¶ """ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∏–∂–µ
        # 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äì –≤–∫–ª–∞–¥–∫–∞ ¬´–ü–æ–º–æ—â—å¬ª —Å—Ç–∞–Ω–µ—Ç –∂–∏–≤–æ–π –∏ –ø–æ–Ω—è—Ç–Ω–æ–π.
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

        help_text = f"""
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë                 √òccultoNG v{VERSION} ‚Äì –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ               ‚ïë
        ‚ïë        ¬´–°–∫—Ä—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ—Ñ–∏, –∏–∑–≤–ª–µ–∫–∞–π –∫–∞–∫ –¥–µ—Ç–µ–∫—Ç–∏–≤¬ª      ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

        üìå –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?
        √òccultoNG ‚Äì —ç—Ç–æ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π ¬´—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –Ω–æ–∂¬ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.  
        –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ù–ï–ó–ê–ú–ï–¢–ù–û –ø—Ä—è—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –ª—é–±–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:
        ‚Ä¢ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∞—Ä–æ–ª–∏, –∫–æ–¥—ã;  
        ‚Ä¢ –ª—é–±—ã–µ —Ñ–∞–π–ª—ã (PDF, ZIP, EXE, –≤–∏–¥–µ–æ) –¥–æ 50 –ú–ë.  

        üîê –í—Å—ë, —á—Ç–æ –≤—ã —Å–ø—Ä—è—á–µ—Ç–µ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º—ã–º –¥–ª—è –≥–ª–∞–∑–∞ –∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞
        –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤. –ì–ª–∞–≤–Ω–æ–µ ‚Äì –Ω–µ —Ç–µ—Ä—è–π—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–º–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å!

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üß© –¢—Ä–∏ –º–µ—Ç–æ–¥–∞ —Å–∫—Ä—ã—Ç–∏—è: –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π –≤—ã–±–∏—Ä–∞—Ç—å
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        1Ô∏è‚É£ LSB (Least Significant Bits) ‚Äì ¬´–ö–ª–∞—Å—Å–∏–∫–∞¬ª  
           ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∏—Ç –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.  
           ‚Ä¢ –ü–ª—é—Å—ã: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (‚âà 12,5 % –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏).  
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –ª–µ–≥–∫–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∫–∞–Ω–µ—Ä–∞–º–∏.  
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–µ—Ä–µ–¥–∞—á–∏, –∫–æ–≥–¥–∞ –≤–∞–∂–µ–Ω –æ–±—ä—ë–º, –∞ –Ω–µ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å.

        2Ô∏è‚É£ Adaptive-Noise ‚Äì ¬´–ù–µ–≤–∏–¥–∏–º–∫–∞¬ª  
           ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç ¬±1 –∫ –ø–∏–∫—Å–µ–ª—é –¢–û–õ–¨–ö–û –≤ ¬´–≥–ª–∞–¥–∫–∏—Ö¬ª –æ–±–ª–∞—Å—Ç—è—Ö (–±–µ–∑ —Ä—ë–±–µ—Ä).  
           ‚Ä¢ –ü–ª—é—Å—ã: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏.  
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–Ω—å—à–µ (~30-50 % –æ—Ç LSB).  
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ—Å—Ç—å.

        3Ô∏è‚É£ Adaptive-Edge-LSB (AELSB) ‚Äì ¬´–ö–æ–º–ø—Ä–æ–º–∏—Å—Å¬ª  
           ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LSB, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö, –≥–¥–µ –Ω–µ—Ç —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ–ø–∞–¥–æ–≤ —Ü–≤–µ—Ç–∞.  
           ‚Ä¢ –ü–ª—é—Å—ã: –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –∏ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å—é.  
           ‚Ä¢ –ú–∏–Ω—É—Å—ã: –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, —Ç—Ä–µ–±—É–µ—Ç CPU.  
           ‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ ¬´–∏ –º–Ω–æ–≥–æ, –∏ —Ç–∏—Ö–æ¬ª.

        üí° –ü—Ä–∞–≤–∏–ª–æ –±–æ–ª—å—à–æ–≥–æ –ø–∞–ª—å—Ü–∞  
        ‚Ä¢ –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ + –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö ‚Üí LSB.  
        ‚Ä¢ –°–æ—Ü—Å–µ—Ç–∏/–ø—É–±–ª–∏–∫–∞—Ü–∏—è ‚Üí Adaptive-Noise.  
        ‚Ä¢ –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí AELSB.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üéÆ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç. 4 —à–∞–≥–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É ¬´–°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª.  
        2. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.  
        3. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.  
        4. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ (—Å–º. –≤—ã—à–µ), –Ω–∞–∂–º–∏—Ç–µ ¬´üîê –°–∫—Ä—ã—Ç—å¬ª ‚Üí —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ PNG.

        –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ –∂–µ, –Ω–æ –≤–Ω—É—Ç—Ä–∏ ‚Äì –≤–∞—à —Å–µ–∫—Ä–µ—Ç.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ¬´–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ¬ª.  
        2. –£–∫–∞–∂–∏—Ç–µ —Ç—É –∂–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —à–∞–≥–µ 4.  
        3. –ù–∞–∂–º–∏—Ç–µ ¬´üîç –ò–∑–≤–ª–µ—á—å¬ª.  
        4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üé® –¢–µ–º—ã –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚Ä¢ –¢—ë–º–Ω–∞—è ‚Äì –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å GitHub Dark.  
        ‚Ä¢ –°–≤–µ—Ç–ª–∞—è ‚Äì –≥–ª–∞–∑ –Ω–µ —É—Å—Ç–∞—ë—Ç –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ.  
        ‚Ä¢ –ö–æ—Å–º–æ—Å / –û–∫–µ–∞–Ω / –õ–µ—Å / –ù–µ–æ–Ω–∫–∞ / –ó–∞–∫–∞—Ç ‚Äì –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.  
        –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üìä –ö–∞–∫ —á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É ¬´–†–∞–∑–º–µ—Ä/–î–æ—Å—Ç—É–ø–Ω–æ/–¢—Ä–µ–±—É–µ—Ç—Å—è¬ª
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚Ä¢ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äì —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–∏–∫—Å–µ–ª–∏.  
        ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ ‚Äì —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç –º–æ–∂–Ω–æ —Å–ø—Ä—è—Ç–∞—Ç—å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ—Ç–æ–¥–∞).  
        ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è ‚Äì —Å–∫–æ–ª—å–∫–æ –∑–∞–Ω–∏–º—É—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ + –∑–∞–≥–æ–ª–æ–≤–æ–∫.  
        –¶–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç:  
        üü¢ <70 % ‚Äì –≤—Å—ë –æ–∫.  
        üü° 70-90 % ‚Äì —Ä–∏—Å–∫ –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏.  
        üî¥ >90 % ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥.

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        üõ†Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚Ä¢ PNG ‚Üí PNG ‚Äì –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –±–µ–∑ –ø–æ—Ç–µ—Ä—å.  
        ‚Ä¢ JPG ‚Üí PNG ‚Äì –º–æ–∂–Ω–æ, –Ω–æ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ JPG-—Å–∂–∞—Ç–∏—è (–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—Ç—Å—è).  
        ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É ¬´–≤–Ω–∏–∑¬ª –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è ‚Äì –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è.  
        ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ ‚Äì –∫–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å.  
        ‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª –ø—Ä–µ—Ä–≤—ë—Ç –¥–ª–∏–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ –ø–æ—Ç–µ—Ä—å.

        –ê–≤—Ç–æ—Ä: {AUTHOR}  

        –£–¥–∞—á–Ω—ã—Ö —Ç–∞–π–Ω—ã—Ö –¥–µ–ª! üïµÔ∏è‚Äç‚ôÇÔ∏è
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏
        help_window = tk.Toplevel(self.root)
        help_window.title("–ü–æ–º–æ—â—å")
        help_window.geometry("600x500")
        help_window.resizable(True, True)
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        help_window.transient(self.root)
        help_window.grab_set()
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_area = scrolledtext.ScrolledText(
            help_window,
            wrap=tk.WORD,
            font=("Segoe UI", 10),
            bg=self.colors["card"],
            fg=self.colors["text"],
            insertbackground=self.colors["fg"],
            selectbackground=self.colors["accent"],
            selectforeground="#ffffff",
            relief="flat",
            borderwidth=1
        )
        text_area.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        text_area.insert(tk.END, help_text)
        text_area.config(state=tk.DISABLED)
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(help_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=help_window.destroy, style="TButton")
        close_btn.pack(pady=10)

    def run(self) -> None:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if "window_size" in self.settings:
            self.root.geometry(self.settings["window_size"])
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if self.data_type.get() == "text":
            self.text_frame.pack(fill=tk.BOTH, expand=True)
            self.file_frame.pack_forget()
        else:
            self.text_frame.pack_forget()
            self.file_frame.pack(fill=tk.X, pady=(10, 0))

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.root.mainloop()

    def on_close(self) -> None:
        self.save_settings()
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if hasattr(self, 'temp_extracted_file') and self.temp_extracted_file and os.path.exists(
                self.temp_extracted_file.name):
            try:
                os.unlink(self.temp_extracted_file.name)
            except:
                pass
        self.root.destroy()


if __name__ == "__main__":
    app = SteganographyUltimate()
    if hasattr(app, 'root') and app.root.winfo_exists():
        app.run()
